<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title type="html">Teiid Spring Boot 1.7.0 Released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/pyzxhYn6Wwg/teiid-spring-boot-170-released.html" /><author><name>Ramesh</name></author><id>http://teiid.blogspot.com/2021/01/teiid-spring-boot-170-released.html</id><updated>2021-01-06T15:24:00Z</updated><content type="html">Teiid Spring Boot version 1.7.0 to support Teiid 16.0 has been released. This release is mainly to support the Teiid's latest version.  In this release, the support for OpenAPI code generation based on VDB has been removed as there is no community interest and moreover it was at OpenAPI 2.0, and the industry has moved to 3.0 and beyond. There are no plans to further pursue this feature. VDB maven plugin was also removed, which was intended to be a replacement for the VDB importing feature was to be used when working on OpenShift, however, since it requires the Maven repository and does not completely represent the feature as defined on the WildFly based deployments this is also removed. You can still use the VDB import feature with Teiid Spring Boot, simply define the VDB with your "IMPORT DATABASE" statements and provide the additional files along with the main VDB file. During the start of the application, Teiid Spring Boot will load all the necessary DDL files for the VDB. The Spring Boot version is upgraded to 2.3.4.RELEASE Ramesh..&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/pyzxhYn6Wwg" height="1" width="1" alt=""/&gt;</content><dc:creator>Ramesh</dc:creator><feedburner:origLink>http://teiid.blogspot.com/2021/01/teiid-spring-boot-170-released.html</feedburner:origLink></entry><entry><title>How to enable HTTPS and SSL termination in a Quarkus app</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/rzVRILbFmLI/" /><category term="DevOps" /><category term="Java" /><category term="Quarkus" /><category term="Security" /><category term="cert.pem" /><category term="kubernetes secret" /><category term="openshift" /><category term="Red Hat OpenShift" /><category term="ssl termination" /><author><name>Carles Arnal</name></author><id>https://developers.redhat.com/blog/?p=808637</id><updated>2021-01-06T08:00:35Z</updated><published>2021-01-06T08:00:35Z</published><content type="html">&lt;p&gt;When it comes to the &lt;a href="https://developers.redhat.com/topics/containers/"&gt;container&lt;/a&gt; world, it is common to have an application deployed to a cluster that needs to be secured. In this article, I will show you how to enable HTTPS and SSL termination for a &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt; application that is running in &lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/"&gt;Red Hat OpenShift&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Create the secret&lt;/h2&gt; &lt;p&gt;First, we will need a paired key and certificate. If you do not have any available, you can use the following command to create a development-only key and certificate:&lt;/p&gt; &lt;pre&gt;~ openssl req -newkey rsa:2048 -new -nodes -x509 -days 3650 -keyout key.pem -out cert.pem&lt;/pre&gt; &lt;p&gt;This will create two files (key.pem and cert.pem) that we need to inject into our pods to make them available to the Quarkus application. This can easily be achieved using secrets and volumes by following these steps:&lt;/p&gt; &lt;ol&gt; &lt;li style="list-style-type: none;"&gt; &lt;ol&gt; &lt;li&gt;Create a key/value secret in the Create Key/Value Secret dialog box.&lt;/li&gt; &lt;li&gt;Add two keys, one for the file cert.pem and one for the key.pem, as shown in Figure 1.&lt;/li&gt; &lt;/ol&gt; &lt;/li&gt; &lt;/ol&gt; &lt;div id="attachment_810247" style="width: 505px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/create-secret.png"&gt;&lt;img aria-describedby="caption-attachment-810247" class="wp-image-810247" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/create-secret.png" alt="Create Key/Value Secret dialog box filled in with Secret Name https-secret and Key/Value entries for cert.pem and key.pem" width="495" height="458" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/create-secret.png 839w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/create-secret-300x278.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/create-secret-768x711.png 768w" sizes="(max-width: 495px) 100vw, 495px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-810247" class="wp-caption-text"&gt;Figure 1: First, create your key/value secret in OpenShift.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Once created, add the secret to the application&amp;#8217;s workload as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_810237" style="width: 445px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/add-secret.png"&gt;&lt;img aria-describedby="caption-attachment-810237" class="wp-image-810237" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/add-secret.png" alt="Add Secret to Workload dialog box with example secret selected, and Add secret as set to Volume with example path selected" width="435" height="362" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/add-secret.png 536w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/add-secret-300x250.png 300w" sizes="(max-width: 435px) 100vw, 435px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-810237" class="wp-caption-text"&gt;Figure 2: Second, add the secret to your workload.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;We now add it as a volume with a mount path of our choice. This will mount and add both the cert and the key files to all application pods.&lt;/p&gt; &lt;h2&gt;Enable HTTPS&lt;/h2&gt; &lt;p&gt;Once the secret has been added to the workload, we&amp;#8217;ll need to set up some environment variables in order to enable HTTPS and for Quarkus to expose the proper port. The most important parts of the configuration are the environment variables referring to the SSL certificate. For more information about options available when configuring SSL in Quarkus see &lt;a target="_blank" rel="nofollow" href="https://quarkus.io/guides/http-reference#ssl"&gt;this section of the Quarkus HTTP Reference Guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Figure 3 shows an example of the resulting configuration.&lt;/p&gt; &lt;div id="attachment_809597" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/environment-variables.png"&gt;&lt;img aria-describedby="caption-attachment-809597" class="wp-image-809597 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/environment-variables-1024x245.png" alt="SSL certificate-related environment variables, see the description for the variables and their values." width="640" height="153" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/environment-variables-1024x245.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/environment-variables-300x72.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/environment-variables-768x184.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/environment-variables.png 1443w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-809597" class="wp-caption-text"&gt;Figure 3: Third, set up your environment variables, especially for your SSL certificate.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;With this configuration, we&amp;#8217;re redirecting all of the insecure requests, and we’re telling Quarkus to use the key and the certificate (that we have mounted in the previous step) into the pods.&lt;/p&gt; &lt;p&gt;Now our Quarkus application should be exposing port 8443 for HTTPS. If we go to the application logs, we should see a message like the following:&lt;/p&gt; &lt;div id="attachment_809627" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/quarkus-log.png"&gt;&lt;img aria-describedby="caption-attachment-809627" class="wp-image-809627 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/quarkus-log-1024x167.png" alt="The application log with the example application's launch record highlighted, which shows what ports it's listening on." width="640" height="104" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/quarkus-log-1024x167.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/quarkus-log-300x49.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/quarkus-log-768x125.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/quarkus-log.png 1473w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-809627" class="wp-caption-text"&gt;Figure 4: And finally, make sure that your Quarkus application is exposing port 8443 for HTTPS.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Exposing the app to the real world&lt;/h2&gt; &lt;p&gt;Great, the Quarkus application is now exposing the proper port and accepting connections through HTTPS. At this point, we can consider the Quarkus work done. However, if we don&amp;#8217;t expose our app to the external world, this is useless.&lt;/p&gt; &lt;p&gt;In order to make our app available externally, we are going to need a &lt;em&gt;service&lt;/em&gt; and a &lt;em&gt;route&lt;/em&gt;. A service serves as an internal load balancer. It identifies a set of replicated pods in order to proxy the connections it receives to them. Services are assigned an IP address and port that, when accessed, proxy to an appropriate backing pod.&lt;/p&gt; &lt;p&gt;A service uses a label selector to find all of the running containers that provide a certain network service on a certain port. Here&amp;#8217;s a service example:&lt;/p&gt; &lt;pre&gt;apiVersion: v1 kind: Service metadata: generateName: test-ssl-apicurioregistry-service- namespace: default spec: selector: app: test-ssl-apicurioregistry ports: - protocol: TCP port: 8443 targetPort: 8443 &lt;/pre&gt; &lt;p&gt;An OpenShift route is a way to expose a service by giving it an externally-reachable host name. For more information on how to create or manage secured routes, see &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.6/networking/routes/secured-routes.html"&gt;the Secured Routes section of the OpenShift documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s a secured route example:&lt;/p&gt; &lt;pre&gt;apiVersion: v1 kind: Route metadata: name: secured-registry namespace: default spec: to: kind: Service name: test-ssl-apicurioregistry-service-mjdzd weight: 100 port: targetPort: 8443 tls: termination: passthrough insecureEdgeTerminationPolicy: Redirect wildcardPolicy: None &lt;/pre&gt; &lt;h2&gt;Check the configuration&lt;/h2&gt; &lt;p&gt;We can easily check our configuration using the OpenShift client:&lt;/p&gt; &lt;pre&gt;➜ ~ oc get routes NAME HOST/PORT PATH SERVICES PORT TERMINATION WILDCARD secured-registry secured-registry-default.apps.carnalca.ipt.integrations.rhmw.io test-ssl-apicurioregistry-service-mjdzd 8443 passthrough/Redirect None &lt;/pre&gt; &lt;pre&gt;➜ ~ oc get svc test-ssl-apicurioregistry-service-mjdzd NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE test-ssl-apicurioregistry-service-mjdzd ClusterIP 172.30.122.25 8443/TCP 21h &lt;/pre&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, I showed you how to secure the traffic of a &lt;a href="https://developers.redhat.com/topics/quarkus/"&gt;Quarkus&lt;/a&gt; application. From the Quarkus properties to the OpenShift resources, you have seen the simplest way to achieve this goal. While I&amp;#8217;ve used some defaults, there are many other features and configurations to explore. Here I am just covering the basics on how to secure a Quarkus application in OpenShift while keeping everything as simple as possible. I hope sharing this experience will be helpful to others.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F06%2Fhow-to-enable-https-and-ssl-termination-in-a-quarkus-app%2F&amp;#38;linkname=How%20to%20enable%20HTTPS%20and%20SSL%20termination%20in%20a%20Quarkus%20app" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F06%2Fhow-to-enable-https-and-ssl-termination-in-a-quarkus-app%2F&amp;#38;linkname=How%20to%20enable%20HTTPS%20and%20SSL%20termination%20in%20a%20Quarkus%20app" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F06%2Fhow-to-enable-https-and-ssl-termination-in-a-quarkus-app%2F&amp;#38;linkname=How%20to%20enable%20HTTPS%20and%20SSL%20termination%20in%20a%20Quarkus%20app" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F06%2Fhow-to-enable-https-and-ssl-termination-in-a-quarkus-app%2F&amp;#38;linkname=How%20to%20enable%20HTTPS%20and%20SSL%20termination%20in%20a%20Quarkus%20app" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F06%2Fhow-to-enable-https-and-ssl-termination-in-a-quarkus-app%2F&amp;#38;linkname=How%20to%20enable%20HTTPS%20and%20SSL%20termination%20in%20a%20Quarkus%20app" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F06%2Fhow-to-enable-https-and-ssl-termination-in-a-quarkus-app%2F&amp;#38;linkname=How%20to%20enable%20HTTPS%20and%20SSL%20termination%20in%20a%20Quarkus%20app" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F06%2Fhow-to-enable-https-and-ssl-termination-in-a-quarkus-app%2F&amp;#38;linkname=How%20to%20enable%20HTTPS%20and%20SSL%20termination%20in%20a%20Quarkus%20app" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F06%2Fhow-to-enable-https-and-ssl-termination-in-a-quarkus-app%2F&amp;#038;title=How%20to%20enable%20HTTPS%20and%20SSL%20termination%20in%20a%20Quarkus%20app" data-a2a-url="https://developers.redhat.com/blog/2021/01/06/how-to-enable-https-and-ssl-termination-in-a-quarkus-app/" data-a2a-title="How to enable HTTPS and SSL termination in a Quarkus app"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/06/how-to-enable-https-and-ssl-termination-in-a-quarkus-app/"&gt;How to enable HTTPS and SSL termination in a Quarkus app&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/rzVRILbFmLI" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;When it comes to the container world, it is common to have an application deployed to a cluster that needs to be secured. In this article, I will show you how to enable HTTPS and SSL termination for a Quarkus application that is running in Red Hat OpenShift. Create the secret First, we will need [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/06/how-to-enable-https-and-ssl-termination-in-a-quarkus-app/"&gt;How to enable HTTPS and SSL termination in a Quarkus app&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/01/06/how-to-enable-https-and-ssl-termination-in-a-quarkus-app/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">808637</post-id><dc:creator>Carles Arnal</dc:creator><dc:date>2021-01-06T08:00:35Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/01/06/how-to-enable-https-and-ssl-termination-in-a-quarkus-app/</feedburner:origLink></entry><entry><title>Building Red Hat Enterprise Linux 9 for the x86-64-v2 microarchitecture level</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/KcfJ7prYKfg/" /><category term="C" /><category term="C#" /><category term="C++" /><category term="Linux" /><category term="Open source" /><category term="AVX2" /><category term="gcc" /><category term="glibc" /><category term="microarchitecture" /><category term="RHEL 9" /><category term="valgrind" /><category term="x86-64" /><author><name>Florian Weimer</name></author><id>https://developers.redhat.com/blog/?p=839567</id><updated>2021-01-05T08:00:09Z</updated><published>2021-01-05T08:00:09Z</published><content type="html">&lt;p&gt;One of the most important early decisions when building a Linux distribution is the scope of supported hardware. The distribution&amp;#8217;s default compiler flags are significant for hardware-platform compatibility. Programs that use newer CPU instructions might not run on older CPUs. In this article, I discuss a new approach to building the x86-64 variant of &lt;a href="https://developers.redhat.com/topics/linux"&gt;Red Hat Enterprise Linux&lt;/a&gt; (RHEL) 9 and share Red Hat&amp;#8217;s recommendation for that build.&lt;/p&gt; &lt;h2&gt;Background of the x86-64 microarchitecture levels&lt;/h2&gt; &lt;p&gt;The GNU C Library (glibc) offers a way to load optimized libraries that use additional hardware features that might not be present on all systems. Originally, this mechanism was designed to support perhaps one or two alternative library implementations, in addition to the default (fallback) implementation that is usually installed in the &lt;code&gt;/usr/lib64&lt;/code&gt; directory. However, the power-set construction involved in the library lookup mechanism &lt;a target="_blank" rel="nofollow" href="https://sourceware.org/pipermail/libc-alpha/2020-May/113757.html"&gt;poorly matches current platforms with a long list of optional CPU features&lt;/a&gt;. We see this especially on the x86 architecture, where many optional features have been added over the years (see the &lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/CPUID"&gt;Wikipedia article for the CPUID instruction&lt;/a&gt; for a list). The plethora of choices poses a problem not only for the dynamic linker but also for programmers. Until recently, there has been little guidance on what CPU features to assume in optimized libraries. &lt;a target="_blank" rel="nofollow" href="https://sourceware.org/bugzilla/show_bug.cgi?id=24080"&gt;GCC and glibc disagree on the definition of feature sets&lt;/a&gt;, and the &lt;a target="_blank" rel="nofollow" href="https://sourceware.org/bugzilla/show_bug.cgi?id=23249"&gt;glibc selection mechanism is vendor-specific&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In the summer of 2020, AMD, Intel, Red Hat, and SUSE &lt;a target="_blank" rel="nofollow" href="https://lists.llvm.org/pipermail/llvm-dev/2020-July/143289.html"&gt;collaborated&lt;/a&gt; to define three x86-64 microarchitecture levels on top of the x86-64 baseline. The three microarchitectures group together CPU features roughly based on hardware release dates:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;x86-64-v2&lt;/b&gt; brings support (among other things) for vector instructions up to Streaming SIMD Extensions 4.2 (SSE4.2)  and Supplemental Streaming SIMD Extensions 3 (SSSE3), the POPCNT instruction (useful for data analysis and bit-fiddling in some data structures), and CMPXCHG16B (a two-word compare-and-swap instruction useful for concurrent algorithms).&lt;/li&gt; &lt;li&gt;&lt;b&gt;x86-64-v3&lt;/b&gt; adds vector instructions up to AVX2, MOVBE (for big-endian data access), and additional bit-manipulation instructions.&lt;/li&gt; &lt;li&gt;&lt;b&gt;x86-64-v4&lt;/b&gt; includes vector instructions from some of the AVX-512 variants.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;We&amp;#8217;ve documented the three levels in detail &lt;a target="_blank" rel="nofollow" href="https://gitlab.com/x86-psABIs/x86-64-ABI"&gt;in the x86-64 psABI supplement&lt;/a&gt;. The upcoming GCC version 11 and LLVM version 12 releases will support them in &lt;code&gt;-march=&lt;/code&gt; arguments. Patches to augment the &lt;code&gt;glibc&lt;/code&gt; dynamic loader with a new mechanism (without the power-set construction) have been incorporated into &lt;code&gt;glibc&lt;/code&gt; under the &lt;code&gt;glibc-hwcaps&lt;/code&gt; moniker. These changes are expected to be part of the upcoming 2.33 release of &lt;code&gt;glibc&lt;/code&gt;.&lt;/p&gt; &lt;h2&gt;Architectural considerations for RHEL 9&lt;/h2&gt; &lt;p&gt;Historically, the x86_64 Red Hat Enterprise Linux userspace has been built to match the original AMD K8 baseline minus the AMD-specific 3Dnow! parts. That decision has held up to and including the latest version of Red Hat Enterprise Linux 8. However, due to kernel-driver removals, old hardware (such as systems with first-generation Opteron CPUs) are unlikely to run Red Hat Enterprise Linux in any useful fashion. There are also significant power requirements when running older hardware.&lt;/p&gt; &lt;p&gt;So far, we&amp;#8217;ve been able to utilize new CPU features via mechanisms like &lt;a target="_blank" rel="nofollow" href="https://sourceware.org/glibc/wiki/GNU_IFUNC"&gt;IFUNCs&lt;/a&gt;, &lt;a target="_blank" rel="nofollow" href="https://gcc.gnu.org/onlinedocs/gcc/Function-Multiversioning.html"&gt;function multi-versioning&lt;/a&gt;, or loading alternative implementations via &lt;code&gt;dlopen&lt;/code&gt;, which could be automated with the ongoing &lt;code&gt;glibc-hwcaps&lt;/code&gt; work. Each of these approaches applies only to specifically designated blocks of code. The remainder of the distribution still does not employ additional CPU features, so those parts of the CPU are essentially dormant.&lt;/p&gt; &lt;p&gt;As a welcome side-effect of defining the x86-64 microarchitecture levels, we now have a convenient language for discussing the architectural baseline for Linux distributions: We can stay the course and use the original K8 baseline or we can apply one of the three later levels.&lt;/p&gt; &lt;h2&gt;Recommendations for RHEL 9&lt;/h2&gt; &lt;p&gt;We believe that x86-64-v2 is the appropriate choice for Red Hat Enterprise Linux 9. Our recommendation is based on the following observations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Virtual machine models that artificially mask x86-64-v2 CPU features despite host support are comparatively easy to adjust.&lt;/li&gt; &lt;li&gt;The next level, x86-64-v3, is not available because we intend to build one unified distribution for the x86-64 architecture.&lt;/li&gt; &lt;li&gt;The &lt;a target="_blank" rel="nofollow" href="https://www.intel.com/content/www/us/en/products/processors/atom/p-series/atom-p-5900-processor-brief.html"&gt;new server-class CPUs released in 2020&lt;/a&gt; do not implement the AVX instruction set.&lt;/li&gt; &lt;li&gt;AVX instructions are also unavailable in certain software implementations (although the &lt;code&gt;valgrind&lt;/code&gt; tool supports them). The lack of emulation support could constrain developers targeting Red Hat Enterprise Linux 9.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;As in previous Red Hat Enterprise Linux versions, we will continue to support other CPU features (beyond x86-64-v2) via IFUNCs and function multi-versioning. We might also use the &lt;code&gt;glibc-hwcaps&lt;/code&gt; mechanism to load optimized versions of libraries. As usual, these plans could change at any time before the release of Red Hat Enterprise Linux 9.&lt;/p&gt; &lt;p&gt;Currently, the changes do not apply to Fedora outside of &lt;a target="_blank" rel="nofollow" href="https://docs.fedoraproject.org/en-US/eln/"&gt;Fedora ELN&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Support for other architectures&lt;/h2&gt; &lt;p&gt;Together with its hardware partners, Red Hat regularly reviews the architectural baselines for all architectures. For IBM POWER and IBM Z, we have historically updated the baseline for every major release. For example, Red Hat Enterprise Linux 8 requires POWER little-endian (ppc64le) and—for the s390x architecture—a z13 or later CPU.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This article described the criteria guiding Red Hat’s approach to choosing an x86-64 microarchitecture level for Red Hat Enterprise Linux 9. Our recommendation, x86-64-v2, will support additional vector instructions (up to SSE4.2 and SSSE 3), the POPCNT instruction for data analysis, and the CMPXCHG16B instruction for concurrency algorithms.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F05%2Fbuilding-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level%2F&amp;#38;linkname=Building%20Red%20Hat%20Enterprise%20Linux%209%20for%20the%20x86-64-v2%20microarchitecture%20level" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F05%2Fbuilding-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level%2F&amp;#38;linkname=Building%20Red%20Hat%20Enterprise%20Linux%209%20for%20the%20x86-64-v2%20microarchitecture%20level" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F05%2Fbuilding-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level%2F&amp;#38;linkname=Building%20Red%20Hat%20Enterprise%20Linux%209%20for%20the%20x86-64-v2%20microarchitecture%20level" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F05%2Fbuilding-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level%2F&amp;#38;linkname=Building%20Red%20Hat%20Enterprise%20Linux%209%20for%20the%20x86-64-v2%20microarchitecture%20level" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F05%2Fbuilding-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level%2F&amp;#38;linkname=Building%20Red%20Hat%20Enterprise%20Linux%209%20for%20the%20x86-64-v2%20microarchitecture%20level" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F05%2Fbuilding-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level%2F&amp;#38;linkname=Building%20Red%20Hat%20Enterprise%20Linux%209%20for%20the%20x86-64-v2%20microarchitecture%20level" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F05%2Fbuilding-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level%2F&amp;#38;linkname=Building%20Red%20Hat%20Enterprise%20Linux%209%20for%20the%20x86-64-v2%20microarchitecture%20level" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F05%2Fbuilding-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level%2F&amp;#038;title=Building%20Red%20Hat%20Enterprise%20Linux%209%20for%20the%20x86-64-v2%20microarchitecture%20level" data-a2a-url="https://developers.redhat.com/blog/2021/01/05/building-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level/" data-a2a-title="Building Red Hat Enterprise Linux 9 for the x86-64-v2 microarchitecture level"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/05/building-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level/"&gt;Building Red Hat Enterprise Linux 9 for the x86-64-v2 microarchitecture level&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/KcfJ7prYKfg" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;One of the most important early decisions when building a Linux distribution is the scope of supported hardware. The distribution&amp;#8217;s default compiler flags are significant for hardware-platform compatibility. Programs that use newer CPU instructions might not run on older CPUs. In this article, I discuss a new approach to building the x86-64 variant of Red [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/05/building-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level/"&gt;Building Red Hat Enterprise Linux 9 for the x86-64-v2 microarchitecture level&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/01/05/building-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">839567</post-id><dc:creator>Florian Weimer</dc:creator><dc:date>2021-01-05T08:00:09Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/01/05/building-red-hat-enterprise-linux-9-for-the-x86-64-v2-microarchitecture-level/</feedburner:origLink></entry><entry><title type="html">CodeReady Containers - Installing business automation operator (Part 4)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/mBGaOLDhK38/codeready-containers-installing.html" /><author><name>Eric D. Schabell</name></author><id>http://feedproxy.google.com/~r/schabell/jboss/~3/yjxsK4vNz38/codeready-containers-installing.html</id><updated>2021-01-05T06:00:00Z</updated><content type="html">As a consistent user and developer on the OpenShift platform over the years, I've tried helping users by sharing my application development content as we've journeyed from  cartridges all the way to container base development. With container based development we've also transitioned from using templates to define how to deploy our tooling and applications, to operators. There are many examples of how to work with the templated versions of our applications around decision management and process automation found on  and . Over the releases of OpenShift 4.x we've seen that operators have become the preferred method of packaging, deploying and managing a Kubernetes-native, thus OpenShift, application. With this in mind it felt like time to explore and update existing demos and example projects to employ the provided operators for installation and runtime. In this series of articles I'll be providing a walk through what it is to use the latest tooling provided by the business automation operator on the OpenShift Container Platform. We'll install the operator by hand, start instances of the decision management and process automation tooling using the OpenShift console, explore command line automation of installing, starting, and configuring the same tooling from the command line, and share a fully automated process automation tooling installation with pre-installed example project. In the previous article we've in the OpenShift web console,  and . In our final article of this series, let's install the business automation operator and its provided developer tooling using the command line. COMMAND LINE OPERATOR INSTALLATION The starting point in this article is that you have installed OpenShift using CodeReady Containers as shown in  , which makes used of my project that validates your environment ensuring you have the proper OpenShift client tooling known as oc client. This client tooling is what we need to interact with the OpenShift platform APIs and is a mainstay for both developers and operations. In this article we'll be using this client tooling as a developer as much as possible, but some of our actions require administrator access to set up the operator installation.  If you chose for some reason to install the CodeReady Containers yourself then you might not have the initial set up described here. In that case you will have seen a message in your startup logs (after running  crc start) that points you to the provided client, shown here for a unix based environment from your favorite console: $ crc oc-env export PATH="/Users/eschabel/.crc/bin/oc:$PATH" # Run this command to configure your shell: # eval $(crc oc-env) If you test the version of this client executable, you'll find that it matches the version of the OpenShift platform: $ ~/.crc/bin/oc/oc version --client Client Version: 4.6.6 The first thing we need to do is ensure you are logged in to your OpenShift platform, which is provided in the start up logs (all one line): $ oc login -u developer -p developer https://api.crc.testing:6443 Let's set up a new project called appdev-in-cloud: $ oc new-project appdev-in-cloud Now using project "appdev-in-cloud" on server "https://api.crc.testing:6443". There is more output lines following the project creation, but they are not that important to us right now. If you want to verify that this project exists you can list your users projects with: $ oc get projects This will list the newly created appdev-in-cloud project as active. Next up, let's take a closer look at preparing to install the business automation operator from our client tooling. This requires admin user access for the next two actions, so let's switch users: $ oc login -u kubeadmin -p HERE https://api.crc.testing:6443 Note your kubeadmin user password was generated during the CodeReady Containers installation and should be used instead of my placeholder above. The login will report access to many more projects, but is currently using  your appdev-in-cloud project. There are two steps needed before you can install the business automation operator in the project appdev-in-cloud. First you need to define the operator group, which is done by creating a file called create-operatorgroup.yaml that contains the following lines: apiVersion: operators.coreos.com/v1 kind: OperatorGroup metadata: annotations: olm.providedAPIs: KieApp.v2.app.kiegroup.org name: businessautomation-operator namespace: appdev-in-cloud spec: targetNamespaces: - appdev-in-cloud Once you have this file available, you can apply it to your project with the following: $ oc apply -f create-operatorgroup.yaml operatorgroup.operators.coreos.com/businessautomation-operator created The output shows that the group was successfully created. Now we need to set the subscription for this operator, done by creating a file called sub-operator.yaml that contains the following lines: apiVersion: operators.coreos.com/v1alpha1 kind: Subscription metadata: name: businessautomation-operator namespace: appdev-in-cloud spec: channel: stable installPlanApproval: Automatic name: businessautomation-operator source: redhat-operators sourceNamespace: openshift-marketplace Once you have this file available, you can apply it the same as the previous one: $ oc apply -f sub-operator.yaml subscription.operators.coreos.com/businessautomation-operator created The output again shows the subscription was successfully created. Now you can see that the business automationoperator is installed (if you like, using the OpenShift web console as you did in ) with the following: $ oc get operators This lists your operator as ready to install. For the final part you can install either one of the provided tools, either Red Hat Decision Manager or Red Hat Process Automation Manager, by using their respective definitions. First log back in as the developer user: $ oc login -u developer -p developer https://api.crc.testing:6443 Then create a file called kieapp-rhdm-authoring.yaml and put the following in it: apiVersion: app.kiegroup.org/v2 kind: KieApp metadata: name: rhdm labels: app: crc-rhdm-install namespace: appdev-in-cloud spec: commonConfig: adminPassword: redhatdm1! adminUser: erics applicationName: rhdm environment: rhdm-authoring This file creates the same instance of the tooling you experienced with . To do this from the client tooling, just run the following command: $ oc apply -f kieapp-rhdm-authoring.yaml kieapp.app.kiegroup.org/rhdm created This starts the installation of an instance of the decision management tooling based on the operator you added to the project appdev-in-cloud. View the installation progress with the following: $ oc get pods The output lists the operator and other pods being set up, initially the status will be ContainerCreating. This takes some time, but when they are fully operational the status should change to Completed. The same can be done for process automation tooling, just like you did in by creating a file called kieapp-rhpam-authoring.yaml and putting the following in it: apiVersion: app.kiegroup.org/v2 kind: KieApp metadata: name: rhpam labels: app: crc-rhpam-install namespace: appdev-in-cloud spec: commonConfig: adminPassword: redhatpam1! adminUser: erics applicationName: rhpam environment: rhpam-authoring Start the instance creation from the client tooling by running the following command: $ oc apply -f kieapp-rhpam-authoring.yaml kieapp.app.kiegroup.org/rhpam created This starts the installation of an instance of the decision management tooling based on the operator you added to the project appdev-in-cloud. View the installation progress with the following: $ oc get pods Again, you'll find pods starting to install process automation tooling in the status ContainerCreating, after some time they will change to Completed. If you are having issues with memory running out, you can remove the project after installing the decision management tooling with the following command: $ oc delete project appdev-in-cloud Once this completes it's removal of the project, you can recreate appdev-in-cloud and install the process automation tooling using the above file. This completes your tour of installing the business automation operator using the client tooling, then leveraging the operator to install both of the provided developer tooling options. MISSED PART OF THE SERIES? Not a worry if you missed any of the previous articles in this four part series, just check out how you can install the container platform (hopefully being able to use the  project), then learn , followed by a look at  and provided by this operator using the OpenShift web console. Finally, in this last article we've installed the business automation operator and offered developer tools using the OpenShift client tooling from a command line.  If you have any comments for feedback, please reach out. I hope you enjoyed this series and tour.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/mBGaOLDhK38" height="1" width="1" alt=""/&gt;</content><dc:creator>Eric D. Schabell</dc:creator><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/yjxsK4vNz38/codeready-containers-installing.html</feedburner:origLink></entry><entry><title>Create your first serverless function with Red Hat OpenShift Serverless Functions</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/8blF8dgF8_4/" /><category term="Java" /><category term="Kubernetes" /><category term="Node.js" /><category term="Quarkus" /><category term="Serverless" /><category term="CloudEvents" /><category term="Knative" /><category term="knative eventing" /><category term="openshift" /><category term="serverless function" /><author><name>Naina Singh</name></author><id>https://developers.redhat.com/blog/?p=841747</id><updated>2021-01-04T08:00:30Z</updated><published>2021-01-04T08:00:30Z</published><content type="html">&lt;p&gt;&lt;i&gt;&lt;span style="font-weight: 400;"&gt;Serverless&lt;/span&gt;&lt;/i&gt;&lt;span style="font-weight: 400;"&gt; is a powerful and popular paradigm where you don’t have to worry about managing and maintaining your application infrastructure. In the serverless context, a &lt;/span&gt;&lt;i&gt;&lt;span style="font-weight: 400;"&gt;function&lt;/span&gt;&lt;/i&gt;&lt;span style="font-weight: 400;"&gt; is a single-purpose piece of code created by the developer but run and monitored by the managed infrastructure. A serverless function’s value is its simplicity and swiftness, which can entice even those who don’t consider themselves developers.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;This article introduces you to Red Hat OpenShift Serverless Functions, a new developer preview feature in&lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/blog/introducing-using-openshift-serverless-event-driven-applications"&gt; &lt;span style="font-weight: 400;"&gt;Red Hat OpenShift Serverless 1.11&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;. I will provide an overview, then present two example applications demonstrating Serverless Functions with Node.js. Please check the&lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://openshift-knative.github.io/docs/docs/functions/quickstart-functions.html"&gt;&lt;span style="font-weight: 400;"&gt; OpenShift Serverless Functions Quick Start&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; document for the example prerequisites.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;OpenShift Serverless Functions&lt;/h2&gt; &lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/openshift_container_platform/4.3/html/serverless_applications/serverless-getting-started?extIdCarryOver=true&amp;#38;sc_cid=701f2000000u72fAAA#knative-eventing_serverless-getting-started"&gt;&lt;span style="font-weight: 400;"&gt;Red Hat OpenShift Serverless&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; leverages the power of &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;Knative&lt;/a&gt; to deliver serverless, event-driven applications that scale on demand. With the&lt;/span&gt;&lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/blog/introducing-using-openshift-serverless-event-driven-applications"&gt; &lt;span style="font-weight: 400;"&gt;OpenShift Serverless 1.11&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; release, we have added the new Serverless Functions feature, currently available as a developer preview. Serverless Functions comes with pre-defined templates and runtimes and provides a local developer experience. Together, these features make it very easy to create serverless applications.&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;How to get Serverless Functions&lt;/h3&gt; &lt;p&gt;Serverless Functions is bundled with the OpenShift Serverless command-line interface (CLI), &lt;code&gt;kn&lt;/code&gt;. When you use an OpenShift Serverless Operator for installation, OpenShift Serverless is automatically deployed, and managed on OpenShift. You can access Serverless Functions with the following command:&lt;/p&gt; &lt;pre&gt;$ kn func &lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: See the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.6/serverless/installing_serverless/installing-openshift-serverless.html"&gt;OpenShift Serverless documentation&lt;/a&gt; for installation instructions.&lt;/p&gt; &lt;h3&gt;What&amp;#8217;s included?&lt;/h3&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Serverless Functions comes with predefined runtimes for popular languages such as&lt;/span&gt;&lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt; &lt;span style="font-weight: 400;"&gt;Quarkus&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;,&lt;/span&gt;&lt;a href="https://developers.redhat.com/blog/category/node-js/"&gt; &lt;span style="font-weight: 400;"&gt;Node.js&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;, and&lt;/span&gt;&lt;a href="https://developers.redhat.com/blog/category/go/"&gt; &lt;span style="font-weight: 400;"&gt;Go&lt;/span&gt;&lt;/a&gt;. These runtimes are based on &lt;a target="_blank" rel="nofollow" href="https://buildpacks.io/"&gt;Cloud Native Buildpacks&lt;/a&gt;. After you choose a runtime, Serverless Functions creates the appropriate project scaffolding so that you can focus on writing business logic. Serverless Functions also includes a local developer experience to support a quick &lt;a href="https://developers.redhat.com/blog/tag/inner-loop/"&gt;inner loop&lt;/a&gt; of iterative development and testing.&lt;/p&gt; &lt;h3&gt;Invoking Serverless Functions&lt;/h3&gt; &lt;p&gt;You can invoke Serverless Functions using plain HTTP requests or &lt;a target="_blank" rel="nofollow" href="https://cloudevents.io"&gt;CloudEvents&lt;/a&gt; with OpenShift Serverless eventing components. OpenShift Serverless Functions comes with out-of-the-box project templates to jumpstart your code for both the HTTP and CloudEvents trigger types.&lt;/p&gt; &lt;p&gt;Next, we&amp;#8217;ll explore two examples. For the first example, we&amp;#8217;ll configure Serverless Functions for HTTP requests. For the second example, we&amp;#8217;ll use CloudEvents. Please use the Serverless Functions &lt;a target="_blank" rel="nofollow" href="https://openshift-knative.github.io/docs/docs/functions/quickstart-functions.html"&gt;quick start document&lt;/a&gt; to ensure that you have the example prerequisites installed.&lt;/p&gt; &lt;h2&gt;Example 1: Create a serverless function for HTTP requests&lt;/h2&gt; &lt;p&gt;Once you have the prerequisites installed, create a new directory for your serverless function. Once you are in the directory, execute the following command to create and deploy a new serverless function:&lt;/p&gt; &lt;pre&gt;$  kn func create  &lt;/pre&gt; &lt;p&gt;By default, the function is initialized with a project template for plain HTTP requests. You can choose your programming language by entering &lt;code&gt;Node.js&lt;/code&gt;, &lt;code&gt;Quarkus&lt;/code&gt;, or &lt;code&gt;Go&lt;/code&gt; as the value for the &lt;code&gt;-l&lt;/code&gt; flag. If you do not provide a runtime with the &lt;code&gt;-l&lt;/code&gt; flag, the default runtime is Node.js. We&amp;#8217;ll use Node.js for both of our examples.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;span style="font-weight: 400;"&gt;You can use the -c flag to prompt the CLI to guide you in creating your first function through the interactive developer experience, which prompts you to add the language and event values. Type -help anytime for assistance.&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;The Node.js runtime&lt;/h3&gt; &lt;p&gt;By default, entering the command &lt;code&gt;$  kn func create&lt;/code&gt; creates the scaffolding for a function that is triggered by a plain HTTP request. The scaffolding for our default Node.js runtime includes &lt;code&gt;index.js&lt;/code&gt;, &lt;code&gt;package.json&lt;/code&gt;, and &lt;code&gt;func.yaml&lt;/code&gt; files. We can extend the &lt;code&gt;index.js&lt;/code&gt; base code to develop our serverless function.&lt;/p&gt; &lt;p&gt;As a start, let&amp;#8217;s add a return message of &lt;code&gt;Greeting &amp;#60;username&amp;#62;&lt;/code&gt; in the provided &lt;code&gt;handleGet(context)&lt;/code&gt; method. Figure 1 shows the &lt;code&gt;handleGet&lt;/code&gt; function in &lt;code&gt;index.js&lt;/code&gt;.&lt;/p&gt; &lt;div id="attachment_843747" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-18-at-2.32.33-PM.png"&gt;&lt;img aria-describedby="caption-attachment-843747" class="wp-image-843747" src="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-18-at-2.32.33-PM-300x124.png" alt="The handleGet function accepts a context object and returns the word 'Greetings' with the name provided. If no name is provided, the word 'stranger' is inserted instead." width="640" height="264" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-18-at-2.32.33-PM-300x124.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-18-at-2.32.33-PM-768x317.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-18-at-2.32.33-PM.png 799w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-843747" class="wp-caption-text"&gt;Figure 1: The handleGet(context) function.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Deploy the function&lt;/h3&gt; &lt;p&gt;Next, we&amp;#8217;ll deploy this function to our OpenShift cluster. Be sure that you are logged into an OpenShift cluster from your local environment, then type the following command with the project name or cluster namespace:&lt;/p&gt; &lt;pre&gt;$ kn func deploy  -n &amp;#60;namespace&amp;#62; &lt;/pre&gt; &lt;p&gt;Remember that you can use the &lt;code&gt;-c&lt;/code&gt; flag for an interactive experience.&lt;/p&gt; &lt;p&gt;Serverless Functions will prompt you to provide a container registry where the resulting image is uploaded. DockerHub is the default registry, but you can use any public image registry.&lt;/p&gt; &lt;p&gt;Now, go to the Topology view in the OpenShift developer console. You will see your function deployed as a Knative service, as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_841797" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-10-at-11.30.15-PM.png"&gt;&lt;img aria-describedby="caption-attachment-841797" class="wp-image-841797 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-10-at-11.30.15-PM-1024x546.png" alt="The Topology view lets you see the serverless function deployed on your OpenShift cluster. The highlighted routes make it easy to access the deployed function from your browser." width="640" height="341" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-10-at-11.30.15-PM-1024x546.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-10-at-11.30.15-PM-300x160.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-10-at-11.30.15-PM-768x410.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-10-at-11.30.15-PM.png 1361w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-841797" class="wp-caption-text"&gt;Figure 2: View the deployed serverless function on your OpenShift cluster.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Test the function&lt;/h3&gt; &lt;p&gt;We can use the routes URL shown in Figure 2 to test our deployed serverless function. Enter the following command to delete the function from your cluster:&lt;/p&gt; &lt;pre&gt;$ kn func delete &lt;/pre&gt; &lt;p&gt;For a &lt;strong&gt;local developer experience&lt;/strong&gt;, we can test serverless functions using standard language tooling or in a container running locally. Use the following command on the &lt;code&gt;kn&lt;/code&gt; command-line to build the container image:&lt;/p&gt; &lt;pre&gt;$ kn func build &lt;/pre&gt; &lt;p&gt;To test the built image container in a local environment, enter:&lt;/p&gt; &lt;pre&gt;$ kn func run  &lt;/pre&gt; &lt;p&gt;Use the &lt;code&gt;curl&lt;/code&gt; command to test your deployed image:&lt;/p&gt; &lt;pre&gt;$ curl ‘https://localhost:8080/?name=Universe’ &lt;/pre&gt; &lt;p&gt;You may also use the browser to see the results, as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_841807" style="width: 496px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-15-at-3.03.24-PM.png"&gt;&lt;img aria-describedby="caption-attachment-841807" class="wp-image-841807 size-full" src="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-15-at-3.03.24-PM.png" alt="Localhost on port 8080 is being accessed with the name 'Universe' as a data for the deployed serverless function's 'get' method. The browser displays 'Greetings Universe!'" width="486" height="215" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-15-at-3.03.24-PM.png 486w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-15-at-3.03.24-PM-300x133.png 300w" sizes="(max-width: 486px) 100vw, 486px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-841807" class="wp-caption-text"&gt;Figure 3: The deployed function being called from the browser.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Example 2: Create a serverless function for CloudEvents&lt;/h2&gt; &lt;p&gt;For our second example, we&amp;#8217;ll create a serverless function that responds to CloudEvents rather than HTTP requests. Before you start, please check the &lt;a target="_blank" rel="nofollow" href="https://openshift-knative.github.io/docs/docs/functions/quickstart-functions.html"&gt;quick start document&lt;/a&gt; to ensure that you have the prerequisites installed for this example.&lt;/p&gt; &lt;h3&gt;Create a new serverless function project&lt;/h3&gt; &lt;p&gt;We&amp;#8217;ll use the same command that we used previously to create a new project. This time, however, we will provide an &lt;code&gt;events&lt;/code&gt; value for the &lt;code&gt;-t&lt;/code&gt; flag. Alternatively, we could use the &lt;code&gt;-c&lt;/code&gt; flag for interactive prompts.&lt;/p&gt; &lt;pre&gt;$  kn func create -l &amp;#60;node|quarkus&amp;#62; -t  events   &lt;/pre&gt; &lt;p&gt;To receive CloudEvents, we will need Knative eventing components, so we&amp;#8217;ll set that up next.&lt;/p&gt; &lt;p&gt;Log in to the OpenShift developer console and navigate to the Developer perspective. Click the &lt;b&gt;Add&lt;/b&gt; section to see the &lt;b&gt;Channel&lt;/b&gt; tile highlighted in Figure 4. This tile creates a default channel.&lt;/p&gt; &lt;div id="attachment_841817" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-11-at-12.02.52-AM.png"&gt;&lt;img aria-describedby="caption-attachment-841817" class="wp-image-841817 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-11-at-12.02.52-AM-1024x360.png" alt="The Channel is highlighted in red." width="640" height="225" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-11-at-12.02.52-AM-1024x360.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-11-at-12.02.52-AM-300x105.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-11-at-12.02.52-AM-768x270.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-841817" class="wp-caption-text"&gt;Figure 4: Locate the Channel tile in the OpenShift developer console (notice the tile in red).&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Now, we need an event source. For that, we will go back to the &lt;b&gt;Add&lt;/b&gt; section and click on the &lt;b&gt;Event Source&lt;/b&gt; tile shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_841827" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-10-at-11.47.22-PM.png"&gt;&lt;img aria-describedby="caption-attachment-841827" class="wp-image-841827 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-10-at-11.47.22-PM-1024x370.png" alt="The Event Source tile is highlighted in red." width="640" height="231" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-10-at-11.47.22-PM-1024x370.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-10-at-11.47.22-PM-300x108.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-10-at-11.47.22-PM-768x278.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-841827" class="wp-caption-text"&gt;Figure 5: Locate the Event Source tile in the OpenShift developer console.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Next, as shown in Figure 6, we will select and configure a ping source as the event source for our deployed function. Note that the &lt;b&gt;Sink&lt;/b&gt; section displays the deployed function and the channel we&amp;#8217;ve just created. For this example, we will choose the channel as the sink for our event source.&lt;/p&gt; &lt;div id="attachment_841837" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-11-at-12.19.32-AM.png"&gt;&lt;img aria-describedby="caption-attachment-841837" class="wp-image-841837 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-11-at-12.19.32-AM-1024x486.png" alt="Sink options for the ping event source are the previously created channel and the deployed OpenShift serverless function." width="640" height="304" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-11-at-12.19.32-AM-1024x486.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-11-at-12.19.32-AM-300x142.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-11-at-12.19.32-AM-768x365.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-841837" class="wp-caption-text"&gt;Figure 6: Select Channel as the sink option for the ping event source.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;After creating the event source, we can view all the components in the Topology view, as shown in Figure 7.&lt;/p&gt; &lt;div id="attachment_841847" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-11-at-12.23.14-AM.png"&gt;&lt;img aria-describedby="caption-attachment-841847" class="wp-image-841847 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-11-at-12.23.14-AM-1024x496.png" alt="The topology view shows the serverless function, event source, and channel components." width="640" height="310" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-11-at-12.23.14-AM-1024x496.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-11-at-12.23.14-AM-300x145.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-11-at-12.23.14-AM-768x372.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-11-at-12.23.14-AM.png 1304w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-841847" class="wp-caption-text"&gt;Figure 7: The deployed serverless function, event source, and channel.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;To add a trigger to the deployed function, hover over the channel, then click and drag the blue line to connect the channel to the function. Figure 8 shows the full deployment details in the Topology view.&lt;/p&gt; &lt;div id="attachment_841857" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-11-at-12.36.05-AM.png"&gt;&lt;img aria-describedby="caption-attachment-841857" class="wp-image-841857 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-11-at-12.36.05-AM-1024x467.png" alt="The serverless function is connected to the event source via the channel. The serverless function pod is active and receiving events." width="640" height="292" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-11-at-12.36.05-AM-1024x467.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-11-at-12.36.05-AM-300x137.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-11-at-12.36.05-AM-768x350.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/Screen-Shot-2020-12-11-at-12.36.05-AM.png 1382w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-841857" class="wp-caption-text"&gt;Figure 8: Connect the serverless function to the event source via the channel.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;When the function starts receiving events, Knative spins up the function pod, and the logs show the call to the function. We have just created and deployed an OpenShift serverless function.&lt;/p&gt; &lt;h2&gt;Looking forward&lt;/h2&gt; &lt;p&gt;OpenShift Serverless Functions is available as a developer preview in OpenShift Serverless 1.11. It is available to all OpenShift users. We will release new features in the coming months, and your feedback is greatly appreciated.&lt;/p&gt; &lt;p&gt;This article is the first in a series introducing Serverless Functions. The next article in this series will introduce you to creating serverless functions with &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt;, the supersonic, subatomic &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; runtime. In the meantime, you can learn more about OpenShift Serverless Functions by reading the &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/blog/introducing-using-openshift-serverless-event-driven-applications"&gt;OpenShift Serverless 1.11 release announcement&lt;/a&gt;, the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.6/serverless/serverless-getting-started.html"&gt;OpenShift Serverless documentation&lt;/a&gt;, and the &lt;a target="_blank" rel="nofollow" href="https://openshift-knative.github.io/docs/docs/functions/about-functions.html"&gt;OpenShift Serverless Functions documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F04%2Fcreate-your-first-serverless-function-with-red-hat-openshift-serverless-functions%2F&amp;#38;linkname=Create%20your%20first%20serverless%20function%20with%20Red%20Hat%20OpenShift%20Serverless%20Functions" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F04%2Fcreate-your-first-serverless-function-with-red-hat-openshift-serverless-functions%2F&amp;#38;linkname=Create%20your%20first%20serverless%20function%20with%20Red%20Hat%20OpenShift%20Serverless%20Functions" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F04%2Fcreate-your-first-serverless-function-with-red-hat-openshift-serverless-functions%2F&amp;#38;linkname=Create%20your%20first%20serverless%20function%20with%20Red%20Hat%20OpenShift%20Serverless%20Functions" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F04%2Fcreate-your-first-serverless-function-with-red-hat-openshift-serverless-functions%2F&amp;#38;linkname=Create%20your%20first%20serverless%20function%20with%20Red%20Hat%20OpenShift%20Serverless%20Functions" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F04%2Fcreate-your-first-serverless-function-with-red-hat-openshift-serverless-functions%2F&amp;#38;linkname=Create%20your%20first%20serverless%20function%20with%20Red%20Hat%20OpenShift%20Serverless%20Functions" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F04%2Fcreate-your-first-serverless-function-with-red-hat-openshift-serverless-functions%2F&amp;#38;linkname=Create%20your%20first%20serverless%20function%20with%20Red%20Hat%20OpenShift%20Serverless%20Functions" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F04%2Fcreate-your-first-serverless-function-with-red-hat-openshift-serverless-functions%2F&amp;#38;linkname=Create%20your%20first%20serverless%20function%20with%20Red%20Hat%20OpenShift%20Serverless%20Functions" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2021%2F01%2F04%2Fcreate-your-first-serverless-function-with-red-hat-openshift-serverless-functions%2F&amp;#038;title=Create%20your%20first%20serverless%20function%20with%20Red%20Hat%20OpenShift%20Serverless%20Functions" data-a2a-url="https://developers.redhat.com/blog/2021/01/04/create-your-first-serverless-function-with-red-hat-openshift-serverless-functions/" data-a2a-title="Create your first serverless function with Red Hat OpenShift Serverless Functions"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/04/create-your-first-serverless-function-with-red-hat-openshift-serverless-functions/"&gt;Create your first serverless function with Red Hat OpenShift Serverless Functions&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/8blF8dgF8_4" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Serverless is a powerful and popular paradigm where you don’t have to worry about managing and maintaining your application infrastructure. In the serverless context, a function is a single-purpose piece of code created by the developer but run and monitored by the managed infrastructure. A serverless function’s value is its simplicity and swiftness, which can [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2021/01/04/create-your-first-serverless-function-with-red-hat-openshift-serverless-functions/"&gt;Create your first serverless function with Red Hat OpenShift Serverless Functions&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2021/01/04/create-your-first-serverless-function-with-red-hat-openshift-serverless-functions/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">841747</post-id><dc:creator>Naina Singh</dc:creator><dc:date>2021-01-04T08:00:30Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2021/01/04/create-your-first-serverless-function-with-red-hat-openshift-serverless-functions/</feedburner:origLink></entry><entry><title type="html">2020 in review - suddenly the world changed</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/bjOV9bHYJX0/2020-in-review-suddenly-the-world-changed.html" /><author><name>Eric D. Schabell</name></author><id>http://feedproxy.google.com/~r/schabell/jboss/~3/lxm3h3C-7Ps/2020-in-review-suddenly-the-world-changed.html</id><updated>2020-12-31T06:00:00Z</updated><content type="html">As 2020 heads off into the mists of history, it's a good time to look back briefly and reflect, as I do every year, on my year. We've shared more time together this year online in virtual events, virtual coffee breaks, and other strange virtual events that before because the world is not the same.  There were few trips and little travel in 2020 and so I spent a large portion of my time working on content.  I've been generating architecture blueprints, upgrading demos, updating workshops, and spreading as much good cheer as I could from behind my webcam. It was my +11th year at Red Hat and suddenly it's all changed with the arrival of a worldwide pandemic. I don't want to spend much time on that part of the year, so let's review some of my activities from 2020. PUBLISHING Again this year I've been publishing a lot online, maybe even more so now that the events are all virtual  and I needed to float new ideas for your review. This year I've published on this site, many were , and multiple articles featured elsewhere on external sites. My hobby of writing as continued, but slowed considerably due to the shortened season and my time being used up elsewhere. Time will tell in 2021 if baseball can return to normal for all of us. It's been amazing to share these insights and experiences that can make others better at what they do. It's the most rewarding part of working in open source, the sharing, mentoring, and collaboration that makes all around you grow. Here are some of the comments that were raise throughout the year: &gt; "Eric never disappoints. His talks are always engaging, informative, usually &gt; numerous and a great investment in time - they always deliver. If I know Eric &gt; is on the speaking agenda at an event, I always make the time to listen." &gt; “Thank you for spreading the word to the world about Red Hat Business &gt; Automation products!”  &gt; "I had the pleasure to attend your session about storytelling at RHTE in &gt; Vienna last year, which was very exciting - and you did it in a way that I &gt; always remember it when I prepare some presentation. Thank you for that."  &gt;  “Everyone can learn from Eric's professionalism, inclusive &amp;amp; positive &gt; attitude &amp;amp; willingness to share.”  &gt; "Thank you very much, I really appreciate your help as I am a great admirer of &gt; your work."  &gt; "Open source, open thinking, open orgs ...the gifts that keep on giving. &gt; Stumbled across these blueprint gems from Red Hat's Eric D. Schabell for &gt; #cloudnative development - the approach to building and running applications &gt; to fully exploit the advantages of the cloud computing model." &gt; "I attended your session today, and I have to tell you it was fantastic--the &gt; best 30 minutes of the day. I've been in communications for nearly 25 years, &gt; and I've attended a number of similar talks. Yours is certainly among the &gt; best. It reinforced concepts I've long been aware of (KISS, for example) and &gt; taught me something new (image manipulation). Thanks for your hard work, and &gt; thanks for sharing," &gt; "I want to say that thank you for the work that you do and how you share these &gt; tutorials and knowledge with the community."    CODING AND OTHER CONTENT This year saw the complete its fifth year since the first commit on April 1, 2016, but it also moved off of Github and can now be found on Gitlab. This year it expanded beyond the projects illustrating containers, cloud operations, deployments, AppDev in the Cloud to include portfolio architecture tooling and example repositories. Be sure to jump on over there and watch the updates as container based projects are migrating to OpenShift Container Platform 4.x and beyond. Almost all of my workshops and demo projects have been updated and are based on installing using OpenShift through the CodeReady Containers offering: * : * * : * * * These workshops are all constantly undergoing revisions and updates to add new product innovations so be sure to check them out thorough next year. TRAVEL This could be the smallest section I've ever written as travel was completely shutdown at the start of 2020, but I did manage to get out a few times before the pandemic ended our face to face encounters.  Just for fun let's look back a minute, as in 2019 the travel was substantial covering over 138,000 km, 22 cities, and 9 countries. In 2020 it was just five trips covering 19,108km, 10 cities, and 6 countries.  Two of those trips were personal vacations, so only three trips were made for work. Of those three work related trips, here's where I visited sharing Red Hat technologies or meet with our partners and customers:  * Vienna, Austria * Dublin, Ireland * Boston, MA (USA) One can only hope we are meeting face to face soon in 2020, but it won't be until later in the year for sure, if that. TIME FOR OTHER PROJECTS The positive side of this lack of travel and recover time, I've worked on a lot of physical projects around my home. I'm a type of person that likes to fix stuff that breaks down himself, so I have turned my attentions to maintenance and improvements for my home: * put in deck flooring for a balcony on my house * removed and renewed all the grout in the back garden paving * painted the back shed, including all the trimming * painted seven interior doors, all their door frames, and six rooms moldings * painted the wooden open staircase (with 14 steps) * painted the wooden hand rails for both staircases (four pieces) * replacing cat5 networking cables with cat6a * painted two window frames in our attic As long as the travel is not taking up all my time I'll plan to continue with the maintenance work in 2021. THANKS TO YOU ALL I certainly hope you enjoyed what I was able to bring to you in 2020, even in these trying times I hope it was entertaining and educational. I want to thank you personally for attending any of the webinars, virtual conference sessions, online workshops, and for taking the time to read any of my published articles. 2021 kicks off with travel suspended, but using the mediums we have at our disposal we'll continue to explore the amazing things you can achieve with open technologies. Finally, stay safe as the world slowly gets back on track, take care of yours, and hope to see you soon face to face!&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/bjOV9bHYJX0" height="1" width="1" alt=""/&gt;</content><dc:creator>Eric D. Schabell</dc:creator><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/lxm3h3C-7Ps/2020-in-review-suddenly-the-world-changed.html</feedburner:origLink></entry><entry><title>How to restrict user authentication in Keycloak during identity brokering</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/-yK8YaPzU_Y/" /><category term="Linux" /><category term="Security" /><category term="apache maven" /><category term="identity broker" /><category term="keycloak" /><category term="restrict access" /><category term="User authentication" /><author><name>Siddhartha De</name></author><id>https://developers.redhat.com/blog/?p=816517</id><updated>2020-12-30T08:00:31Z</updated><published>2020-12-30T08:00:31Z</published><content type="html">&lt;p&gt;As per the design, Keycloak imports all users into its local database if the users are authenticated via any third-party identity provider (e.g., Google, Facebook, or Okta). But what if users authenticated through the third-party identity provider have to be restricted—or be allowed only limited access—to applications that are federated with Keycloak? Here&amp;#8217;s how you do it.&lt;br /&gt; &lt;span id="more-816517"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;You first develop a custom authenticator, which will disable the user if the third-party authenticated user is beyond the known list, and place the authenticator in the &lt;code&gt;First Broker Login&lt;/code&gt; authentication flow.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: This article assumes that you are familiar with Keycloak and Maven. &lt;a target="_blank" rel="nofollow" href="https://www.keycloak.org/"&gt;Keycloak&lt;/a&gt; is an open source identity and access management (IAM) tool and is the upstream project for &lt;a href="https://developers.redhat.com/blog/2019/02/07/red-hat-single-sign-on-give-it-a-try-for-no-cost/"&gt;Red Hat&amp;#8217;s single sign-on (SSO) tools&lt;/a&gt;. Many developers use Keycloak or Red Hat&amp;#8217;s SSO tools for enterprise security in production environments.&lt;/p&gt; &lt;h2&gt;Creating a custom authenticator with Keycloak&lt;/h2&gt; &lt;p&gt;Keycloak provides an &lt;a target="_blank" rel="nofollow" href="https://www.keycloak.org/docs/latest/server_development/#_auth_spi"&gt;authentication service provider interface&lt;/a&gt; (SPI) that we&amp;#8217;ll use to write a new custom authenticator. As &lt;a target="_blank" rel="nofollow" href="https://www.keycloak.org/docs/latest/server_development/#packaging-classes-and-deployment"&gt;described in the Keycloak documentation&lt;/a&gt;, we must do the following when we package the custom authenticator:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Package the entire implementation into a single JAR file.&lt;/li&gt; &lt;li&gt;Ensure that the JAR contains a file named &lt;code&gt;org.keycloak.authentication.AuthenticatorFactory&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Locate the &lt;code&gt;org.keycloak.authentication.AuthenticatorFactory&lt;/code&gt; file in the &lt;code&gt;META-INF/services/&lt;/code&gt; directory.&lt;/li&gt; &lt;li&gt;Ensure that it lists the fully qualified class name for each &lt;code&gt;AuthenticatorFactory&lt;/code&gt; implementation.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;The EnableIfRequire class&lt;/h2&gt; &lt;p&gt;To start, we&amp;#8217;ll create two classes. The first is &lt;code&gt;EnableIfRequire.java&lt;/code&gt;, which enables the user post creation if it exists in the list:&lt;/p&gt; &lt;pre&gt;package com.sid.keycloakauthenticator; import java.io.File; import java.io.FileNotFoundException; import java.util.ArrayList; import java.util.Arrays; import java.util.List; import java.util.Scanner; import java.util.logging.Level; import java.util.logging.Logger; import org.keycloak.authentication.AuthenticationFlowContext; import org.keycloak.authentication.authenticators.broker.IdpCreateUserIfUniqueAuthenticator; import org.keycloak.authentication.authenticators.broker.util.SerializedBrokeredIdentityContext; import org.keycloak.broker.provider.BrokeredIdentityContext; import org.keycloak.models.UserModel; /** * * @author sidd */ public class EnableIfRequire extends IdpCreateUserIfUniqueAuthenticator { //private final List users = Arrays.asList("siddhartha.de@mail.com","sidde3"); private static List users = new ArrayList(); static{ File file = new File(System.getProperty("userlist")); //userlist is the reference of file which will hold the list of users if (file.exists()) { try { Scanner sc = new Scanner(file); sc.useDelimiter(","); while (sc.hasNext()) { users.add(sc.next()); } }catch (FileNotFoundException ex) { Logger.getLogger(CreateIfRequire.class.getName()).log(Level.SEVERE, null, ex); } } } @Override protected void userRegisteredSuccess(AuthenticationFlowContext context, UserModel registeredUser, SerializedBrokeredIdentityContext serializedCtx, BrokeredIdentityContext brokerContext) { System.out.println(registeredUser.getUsername()+" User is successfully registered..."); if(!users.contains(registeredUser.getUsername())){ registeredUser.setEnabled(false); //Disable the user if not there in list } } }&lt;/pre&gt; &lt;h2&gt;The EnableIfRequireFactory class&lt;/h2&gt; &lt;p&gt;Next, we create &lt;code&gt;EnableIfRequireFactory.java&lt;/code&gt;, which instantiates the authenticator:&lt;/p&gt; &lt;pre&gt;package com.sid.keycloakauthenticator; import java.util.ArrayList; import java.util.List; import org.keycloak.Config; import org.keycloak.authentication.Authenticator; import org.keycloak.authentication.authenticators.broker.IdpCreateUserIfUniqueAuthenticatorFactory; import org.keycloak.models.KeycloakSession; import org.keycloak.provider.ProviderConfigProperty; /* * @author sid */ public class EnableIfRequireFactory extends IdpCreateUserIfUniqueAuthenticatorFactory { public static final String PROVIDER_ID = "idp-enable-user-if-require"; static CreateIfRequire SINGLETON = new CreateIfRequire(); public static final String REQUIRE_PASSWORD_UPDATE_AFTER_REGISTRATION = "require.password.update.after.registration"; @Override public Authenticator create(KeycloakSession session) { return SINGLETON; } @Override public void init(Config.Scope config) { } @Override public String getId() { return PROVIDER_ID; } @Override public String getDisplayType() { return "Enable User When Require"; } @Override public String getHelpText() { return "Enable user when require"; } private static final List configProperties = new ArrayList(); static { ProviderConfigProperty property; property = new ProviderConfigProperty(); property.setName(REQUIRE_PASSWORD_UPDATE_AFTER_REGISTRATION); property.setLabel("Require Password Update"); property.setType(ProviderConfigProperty.BOOLEAN_TYPE); property.setHelpText("You are required to update password when user will be created"); configProperties.add(property); } @Override public List getConfigProperties() { return configProperties; } } &lt;/pre&gt; &lt;h2&gt;Organize and compile the Keycloak custom authenticator&lt;/h2&gt; &lt;p&gt;In this section, we&amp;#8217;ll use Maven to organize the mobile authentication project and compile our two new classes.&lt;/p&gt; &lt;h3&gt;Set up the project&lt;/h3&gt; &lt;p&gt;Execute the following command to create a project using Maven:&lt;/p&gt; &lt;pre&gt;mvn archetype:generate -DgroupId=com.sid.keycloakauthenticator -DartifactId=keycloak-authenticator -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false &lt;/pre&gt; &lt;p&gt;Place both of the classes that we&amp;#8217;ve just created in the &lt;code&gt;src/main/java/com/sid/keycloakauthenticator&lt;/code&gt; path.&lt;/p&gt; &lt;p&gt;Now, create a file named &lt;code&gt;org.keycloak.authentication.AuthenticatorFactory&lt;/code&gt; at &lt;code&gt;src/main/resources/META-INF/services&lt;/code&gt;. Add an entry for the new &lt;code&gt;AuthenticationFactory&lt;/code&gt;: &lt;code&gt;com.sid.keycloakauthenticator.EnableIfRequireFactory&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Resolve the project dependencies&lt;/h3&gt; &lt;p&gt;The Keycloak authentication module is a private SPI, so you are required to use the &lt;code&gt;MANIFEST.MF&lt;/code&gt; to resolve dependencies. Make the following entry in the &lt;code&gt;MANIFEST.MF&lt;/code&gt; at the line &lt;code&gt;src/main/resources/META-INF&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;Dependencies: org.keycloak.keycloak-server-spi-private, org.keycloak.keycloak-services, org.keycloak.keycloak-core, org.keycloak.keycloak-server-spi &lt;/pre&gt; &lt;p&gt;You can now edit the Maven &lt;code&gt;pom.xml&lt;/code&gt; to add the following dependencies:&lt;/p&gt; &lt;pre&gt; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.keycloak&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;keycloak-core&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;4.8.3.Final&amp;#60;/version&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.keycloak&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;keycloak-server-spi&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;4.8.3.Final&amp;#60;/version&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.keycloak&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;keycloak-server-spi-private&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;4.8.3.Final&amp;#60;/version&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.jboss.logging&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;jboss-logging&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;3.4.0.Final&amp;#60;/version&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;org.keycloak&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;keycloak-services&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;4.8.3.Final&amp;#60;/version&amp;#62; &amp;#60;scope&amp;#62;provided&amp;#60;/scope&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;h3&gt;Build and deploy the project&lt;/h3&gt; &lt;p&gt;Execute the following command to build the project:&lt;/p&gt; &lt;pre&gt;mvn clean install &lt;/pre&gt; &lt;p&gt;This command generates output in the &lt;code&gt;keycloak-authenticator-1.0-SNAPSHOT.jar&lt;/code&gt; target folder. Keycloak ships bundled with &lt;a target="_blank" rel="nofollow" href="https://www.wildfly.org/"&gt;WildFly&lt;/a&gt;, so you can use the &lt;code&gt;jboss-cli&lt;/code&gt; interface and the following command to deploy the JAR:&lt;/p&gt; &lt;pre&gt;deploy /path/to/keycloak-authenticator-1.0-SNAPSHOT.jar &lt;/pre&gt; &lt;h3&gt;Configure the custom authentication flow&lt;/h3&gt; &lt;p&gt;After you&amp;#8217;ve successfully deployed the authenticator JAR, you will configure the authentication flow. Here&amp;#8217;s how to configure a custom flow in Keycloak:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Log into the Keycloak management console, select the realm where you want to configure the custom mobile authenticator, and click on &lt;b&gt;Authentication&lt;/b&gt; in the left-side panel.&lt;/li&gt; &lt;li&gt;In the &lt;b&gt;Flow&lt;/b&gt; tab, select &lt;strong&gt;First Broker Login&lt;/strong&gt; from the drop-down list.&lt;/li&gt; &lt;li&gt;Click the &lt;strong&gt;Copy&lt;/strong&gt; button and name the flow; for example, CustomBrokerFlow.&lt;/li&gt; &lt;li&gt;Click &lt;strong&gt;Add Execution&lt;/strong&gt; and select &lt;b&gt;Enable User When Require&lt;/b&gt; in the provider drop-down list&lt;/li&gt; &lt;li&gt;Place the executor just after &lt;b&gt;Create User If Unique&lt;/b&gt;&lt;/li&gt; &lt;li&gt;Now, this authentication flow can be used against the associated identity provider&amp;#8217;s &lt;b&gt;First Login Flow&lt;/b&gt;.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F30%2Fhow-to-restrict-users-being-authenticated-in-keycloak-during-identity-brokering%2F&amp;#38;linkname=How%20to%20restrict%20user%20authentication%20in%20Keycloak%20during%20identity%20brokering" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F30%2Fhow-to-restrict-users-being-authenticated-in-keycloak-during-identity-brokering%2F&amp;#38;linkname=How%20to%20restrict%20user%20authentication%20in%20Keycloak%20during%20identity%20brokering" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F30%2Fhow-to-restrict-users-being-authenticated-in-keycloak-during-identity-brokering%2F&amp;#38;linkname=How%20to%20restrict%20user%20authentication%20in%20Keycloak%20during%20identity%20brokering" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F30%2Fhow-to-restrict-users-being-authenticated-in-keycloak-during-identity-brokering%2F&amp;#38;linkname=How%20to%20restrict%20user%20authentication%20in%20Keycloak%20during%20identity%20brokering" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F30%2Fhow-to-restrict-users-being-authenticated-in-keycloak-during-identity-brokering%2F&amp;#38;linkname=How%20to%20restrict%20user%20authentication%20in%20Keycloak%20during%20identity%20brokering" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F30%2Fhow-to-restrict-users-being-authenticated-in-keycloak-during-identity-brokering%2F&amp;#38;linkname=How%20to%20restrict%20user%20authentication%20in%20Keycloak%20during%20identity%20brokering" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F30%2Fhow-to-restrict-users-being-authenticated-in-keycloak-during-identity-brokering%2F&amp;#38;linkname=How%20to%20restrict%20user%20authentication%20in%20Keycloak%20during%20identity%20brokering" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F30%2Fhow-to-restrict-users-being-authenticated-in-keycloak-during-identity-brokering%2F&amp;#038;title=How%20to%20restrict%20user%20authentication%20in%20Keycloak%20during%20identity%20brokering" data-a2a-url="https://developers.redhat.com/blog/2020/12/30/how-to-restrict-users-being-authenticated-in-keycloak-during-identity-brokering/" data-a2a-title="How to restrict user authentication in Keycloak during identity brokering"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/12/30/how-to-restrict-users-being-authenticated-in-keycloak-during-identity-brokering/"&gt;How to restrict user authentication in Keycloak during identity brokering&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/-yK8YaPzU_Y" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;As per the design, Keycloak imports all users into its local database if the users are authenticated via any third-party identity provider (e.g., Google, Facebook, or Okta). But what if users authenticated through the third-party identity provider have to be restricted—or be allowed only limited access—to applications that are federated with Keycloak? Here&amp;#8217;s how you [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/12/30/how-to-restrict-users-being-authenticated-in-keycloak-during-identity-brokering/"&gt;How to restrict user authentication in Keycloak during identity brokering&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/12/30/how-to-restrict-users-being-authenticated-in-keycloak-during-identity-brokering/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">816517</post-id><dc:creator>Siddhartha De</dc:creator><dc:date>2020-12-30T08:00:31Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/12/30/how-to-restrict-users-being-authenticated-in-keycloak-during-identity-brokering/</feedburner:origLink></entry><entry><title>Integrating Red Hat Single Sign-On version 7.4 with Red Hat Directory Server (LDAP)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/aw3L0dNEPwU/" /><category term="Linux" /><category term="Red Hat SSO" /><category term="Security" /><category term="directory server" /><category term="keycloak" /><category term="ldap" /><category term="SSO" /><category term="sync users" /><author><name>orivat</name></author><id>https://developers.redhat.com/blog/?p=796417</id><updated>2020-12-29T08:00:20Z</updated><published>2020-12-29T08:00:20Z</published><content type="html">&lt;p&gt;This article describes the integration of &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/products/red-hat-single-sign-on"&gt;Red Hat Single Sign-On (SSO)&lt;/a&gt; with &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/products/red-hat-directory-server"&gt;Red Hat Directory Server&lt;/a&gt; 11 (LDAP). It also illustrates how it is possible to perform user synchronization and group synchronization between Red Hat Directory Server and Red Hat&amp;#8217;s single sign-on tools.&lt;/p&gt; &lt;h2&gt;Install Red Hat Directory Server 11&lt;/h2&gt; &lt;p&gt;To install Red Hat Directory Server 11, you first need an active Red Hat Directory Server subscription (which you can get using the subscription-manager). Once you have this, do the following.&lt;/p&gt; &lt;h3&gt;Install the Red Hat Directory Server 11 package&lt;/h3&gt; &lt;p&gt;Install the Red Hat Directory Server 11 package with:&lt;/p&gt; &lt;pre&gt;# yum module install redhat-ds:11 &lt;/pre&gt; &lt;p&gt;For more details, see chapter: &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_directory_server/11/html/installation_guide/assembly_installing-the-directory-server-packages_installation-guide#proc_installing-the-directory-server-packages_assembly_installing-the-directory-server-packages"&gt;1.1. Installing the Directory Server packages.&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;Create a Red Hat Directory Server instance&lt;/h3&gt; &lt;p&gt;Create a new LDAP instance on port 2389, with the database suffix &lt;code&gt;dc=example,dc=com&lt;/code&gt;:&lt;/p&gt; &lt;pre style="padding-left: 40px;"&gt;dscreate interactive Install Directory Server (interactive mode) Enter system's hostname [host1.remote.csb]: Enter the instance name [jdoe]: ds2389 Enter port number []: 2389 Create self-signed certificate database [yes]: Enter secure port number []: 2636 Enter Directory Manager DN [cn=Directory Manager]: Enter the Directory Manager password: Confirm the Directory Manager Password: Enter the database suffix (or enter "none" to skip) [dc=jdoe,dc=remote,dc=csb]: dc=example,dc=com Create sample entries in the suffix [no]: yes Do you want to start the instance after the installation? [yes]: Are you ready to install? [no]: yes Starting installation... Completed installation for ds2389 &lt;/pre&gt; &lt;h3&gt;Populate the ds2389 instance&lt;/h3&gt; &lt;p&gt;Populate the new instance ds2389 with  the-existing example Example.ldif using the command &lt;code&gt;ldif2db&lt;/code&gt;. To do so:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Stop the ds2389 instance:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;# dsctl ds2389 stop Instance "ds2389" has been stopped&lt;/pre&gt; &lt;ol start="2"&gt; &lt;li&gt;Import the ldif example:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;# dsctl ds2389 ldif2db userroot /usr/share/dirsrv/data/Example.ldif ldif2db successful&lt;/pre&gt; &lt;ol start="3"&gt; &lt;li&gt;Restart the instance:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;# dsctl ds2389 start Instance "ds2389" has been started&lt;/pre&gt; &lt;ol start="4"&gt; &lt;li&gt;Set the instance to start automatically when the machine boots:&lt;/li&gt; &lt;/ol&gt; &lt;pre style="padding-left: 40px;"&gt;# systemctl enable dirsrv@ds2389&lt;/pre&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: For more information, see the Red Hat Directory Server documentation: &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_directory_server/11/html/administration_guide/starting_and_stopping-ds"&gt;1.5. STARTING AND STOPPING A DIRECTORY SERVER INSTANCE&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Connect to the LDAP instance&lt;/h3&gt; &lt;p&gt;Connect to the LDAP instance with an LDAP browser, such as &lt;a target="_blank" rel="nofollow" href="http://jxplorer.org/"&gt;JXplorer.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The information to connect are:&lt;/p&gt; &lt;pre style="padding-left: 80px;"&gt;Connection URL: ldap://localhost:2389 Username: cn=Directory Manager password: &amp;#60;ds28389-password&amp;#62;&lt;/pre&gt; &lt;div id="attachment_796647" style="width: 651px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/RH-DS_2389.png"&gt;&lt;img aria-describedby="caption-attachment-796647" class="wp-image-796647" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/RH-DS_2389-300x109.png" alt="JXplorer showing an example LDAP entry." width="641" height="232" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/RH-DS_2389-300x109.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/RH-DS_2389-768x278.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/RH-DS_2389.png 995w" sizes="(max-width: 641px) 100vw, 641px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-796647" class="wp-caption-text"&gt;Figure 1: Explore the example ldif in JXplorer.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Install and deploy a Red Hat SSO instance&lt;/h2&gt; &lt;p&gt;Now it&amp;#8217;s time to install and deploy your Red Hat Single Sign-On instance.&lt;/p&gt; &lt;h3&gt;Install Red Hat SSO&lt;/h3&gt; &lt;p&gt;To install Red Hat SSO:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Download the &lt;code&gt;rh-sso&lt;/code&gt; zip distribution.&lt;/li&gt; &lt;li&gt;Unzip &lt;code&gt;rh-sso&lt;/code&gt; with:&lt;/li&gt; &lt;/ol&gt; &lt;pre class="programlisting language-bash" style="padding-left: 40px;"&gt;unzip rh-sso-&amp;#60;release-number&amp;#62;.zip&lt;/pre&gt; &lt;p&gt;For further details about installation, see &lt;a target="_blank" rel="nofollow" href="https://access.redhat.com/documentation/en-us/red_hat_single_sign-on/7.3/html/getting_started_guide/install-boot#installing_the_server"&gt;Getting Guide Started Guide, section  2.1. Installing the Server.&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;Red Hat SSO instance deployment&lt;/h3&gt; &lt;p&gt;To boot the Red Hat Single Sign-On server, go to the &lt;code class="literal"&gt;bin&lt;/code&gt; directory of the server distribution and run the &lt;code class="literal"&gt;standalone&lt;/code&gt; boot script:&lt;/p&gt; &lt;pre&gt;cd bin ./standalone.sh&lt;/pre&gt; &lt;ul&gt; &lt;li&gt;Open &lt;a class="link" target="_blank" rel="nofollow" href="http://localhost:8080/auth"&gt;http://localhost:8080/auth&lt;/a&gt; in your web browser. The welcome page will indicate that the server is running.&lt;/li&gt; &lt;li&gt;Enter a username and password to create an initial admin user.&lt;/li&gt; &lt;li&gt;Create an LDAP Realm as shown in Figure 2.&lt;/li&gt; &lt;/ul&gt; &lt;div id="attachment_846647" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/12/img_5fe3024219153.png"&gt;&lt;img aria-describedby="caption-attachment-846647" class="wp-image-846647 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/12/img_5fe3024219153-1024x565.png" alt="RH-SSO admin console with ldap realm" width="640" height="353" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/12/img_5fe3024219153-1024x565.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/img_5fe3024219153-300x165.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/img_5fe3024219153-768x424.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/img_5fe3024219153.png 1144w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-846647" class="wp-caption-text"&gt;Figure 2: RH-SSO admin console with ldap realm&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Integrate Red Hat&amp;#8217;s single sign-on tools and Red Hat Directory Server&lt;/h2&gt; &lt;p&gt;Now that you have Red Hat&amp;#8217;s single sign-on tools installed, you have a dedicated realm for your LDAP test. Do the following to set up the integration.&lt;/p&gt; &lt;h3&gt;Federate LDAP users&lt;/h3&gt; &lt;p&gt;In order to connect to the running Red Hat Directory Server ds2389 instance, select the &lt;strong&gt;User Federation&lt;/strong&gt; tab, and select &lt;strong&gt;ldap provider&lt;/strong&gt;&lt;em&gt;. &lt;/em&gt;In addition, you have to provide the following information:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Vendor&lt;/strong&gt;: &lt;code&gt;Red Hat Directory Server&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Username LDAP attribute&lt;/strong&gt;: &lt;code&gt;uid&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;RDN LDAP attribute&lt;/strong&gt;: &lt;code&gt;cn&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;UUID LDAP attribute&lt;/strong&gt;: &lt;code&gt;nsuniqueid&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;User Object Classes&lt;/strong&gt;: &lt;code&gt;InetOrgPerson, organizatioalPerson&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Connection URL&lt;/strong&gt;: &lt;code&gt;ldap://localhost:2389&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Users DN&lt;/strong&gt;: &lt;code&gt;ou=people,dc=example,dc=com&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Bind Type&lt;/strong&gt;: &lt;code&gt;simple&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Bind DN&lt;/strong&gt;: &lt;code&gt;cn=Directory Manager&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Search Scope&lt;/strong&gt;: &lt;code&gt;Subtree&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For the other fields, pick the default purpose value, as shown in Figure 3.&lt;/p&gt; &lt;div id="attachment_846667" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/12/img_5fe30906cd059.png"&gt;&lt;img aria-describedby="caption-attachment-846667" class="wp-image-846667 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/12/img_5fe30906cd059-1024x644.png" alt="Configure your LDAP provider for user federation." width="640" height="403" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/12/img_5fe30906cd059-1024x644.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/img_5fe30906cd059-300x189.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/img_5fe30906cd059-768x483.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/12/img_5fe30906cd059.png 1517w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-846667" class="wp-caption-text"&gt;Figure 3: Configure your LDAP provider for user federation.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Synchronize single sign-on and LDAP users&lt;/h3&gt; &lt;p&gt;Once all of the settings are entered, you can synchronize users either manually or automatically using the Sync Settings, as shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_796707" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/ldap_user_stnchronization.png"&gt;&lt;img aria-describedby="caption-attachment-796707" class="wp-image-796707 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/ldap_user_stnchronization-1024x425.png" alt="Under Sync Settings is Cache Settings, which has buttons. Either Synchronize button lets you sync LDAP &amp;#38; SSO users." width="640" height="266" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/ldap_user_stnchronization-1024x425.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/ldap_user_stnchronization-300x124.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/ldap_user_stnchronization-768x319.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/ldap_user_stnchronization.png 1039w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-796707" class="wp-caption-text"&gt;Figure 4: Synchronize your SSO and LDAP users.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;To synchronize users:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Manually: Select either &lt;strong&gt;Synchronize all users&lt;/strong&gt; or &lt;strong&gt;Synchronized changed users&lt;/strong&gt;. The command &lt;strong&gt;Synchronize all users&lt;/strong&gt; can be quite lengthy if you have a large number of LDAP users.&lt;/li&gt; &lt;li&gt;Automatically: Select either &lt;strong&gt;Periodic Full Sync&lt;/strong&gt; or &lt;strong&gt;Periodic Changed Users Sync&lt;/strong&gt;, based on the delta. The most efficient and less time-consuming option is to use a &lt;strong&gt;Periodic Changed Users Sync&lt;/strong&gt;&lt;em&gt;.&lt;/em&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Once the sync finishes, your LDAP users become visible at the SSO level as shown in Figure 5. When synchronization is active, newly created LDAP users will also be synchronized and created at this level (upon the next synchronization).&lt;/p&gt; &lt;div id="attachment_796747" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/ldap_users.png"&gt;&lt;img aria-describedby="caption-attachment-796747" class="wp-image-796747 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/ldap_users-1024x266.png" alt="Ldaptest &amp;#62; Manage &amp;#62; Users with the LDAP users now populated" width="640" height="166" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/ldap_users-1024x266.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/ldap_users-300x78.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/ldap_users-768x200.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-796747" class="wp-caption-text"&gt;Figure 5: Verify that your LDAP users now show up.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Synchronize Red Hat Single Sign On and Red Hat Directory Server via groups&lt;/h2&gt; &lt;p&gt;It is also possible to perform group synchronization between Red Hat Directory Server and Red Hat&amp;#8217;s single sign-on tools. In order to achieve this, you have to create a mapper of type group-ldap-mapper.&lt;/p&gt; &lt;h4&gt;Configure a group LDAP mapper&lt;/h4&gt; &lt;p&gt;In the Group-ldap-mapper section, provide the following fields:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Mapper Type&lt;/strong&gt;: &lt;code&gt;group-ldap-mapper&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;LDAP Groups DN&lt;/strong&gt;: &lt;code&gt;ou=groups,dc=example,dc=com&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Group Name LDAP Attribute&lt;/strong&gt;: &lt;code&gt;cn&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Group Object Classes&lt;/strong&gt;: &lt;code&gt;groupOfUniqueNames&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Membership LDAP Attribute&lt;/strong&gt;: &lt;code&gt;uniqueMember&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Membership User LDAP Attribute&lt;/strong&gt;: &lt;code&gt;uid&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Member-Of LDAP Attribute&lt;/strong&gt;: &lt;code&gt;memberOf&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For all the other fields, pick the default value as shown in Figure 6.&lt;/p&gt; &lt;div id="attachment_796777" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Group_ldap_mapper.png"&gt;&lt;img aria-describedby="caption-attachment-796777" class="wp-image-796777 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Group_ldap_mapper-1024x787.png" alt="Ldaptest &amp;#62; User Federation &amp;#62; Group-ldap-mapper filled in with the specified values." width="640" height="492" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Group_ldap_mapper-1024x787.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Group_ldap_mapper-300x231.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Group_ldap_mapper-768x590.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Group_ldap_mapper.png 1215w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-796777" class="wp-caption-text"&gt;Figure 6: Synchronize your SSO and LDAP groups.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;3.2 Synchronize your groups&lt;/h3&gt; &lt;p&gt;It is only possible to perform group synchronization manually. You can perform group synchronization from Red Hat&amp;#8217;s single sign-on tools to LDAP with the &lt;strong&gt;Sync Ldap Group to Keycloak &lt;/strong&gt;button, and also from LDAP to Red Hat&amp;#8217;s single sign-on tools with the &lt;strong&gt;Sync Keycloak Groups to LDAP&lt;/strong&gt; button&lt;em&gt;.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;After group synchronization, all of the groups have been imported into SSO with their corresponding members, as shown in Figure 7.&lt;/p&gt; &lt;div id="attachment_796827" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Group_rh_sso.png"&gt;&lt;img aria-describedby="caption-attachment-796827" class="wp-image-796827 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Group_rh_sso-1024x298.png" alt="Ldaptest &amp;#62; Manage &amp;#62; Groups with the LDAP groups now added and populated" width="640" height="186" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/10/Group_rh_sso-1024x298.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Group_rh_sso-300x87.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Group_rh_sso-768x224.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/10/Group_rh_sso.png 1531w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-796827" class="wp-caption-text"&gt;Figure 7: Verify that your LDAP groups now show up.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F29%2Fintegrating-red-hat-single-sign-on-version-7-4-with-red-hat-directory-server-ldap%2F&amp;#38;linkname=Integrating%20Red%20Hat%20Single%20Sign-On%20version%207.4%20with%20Red%20Hat%20Directory%20Server%20%28LDAP%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F29%2Fintegrating-red-hat-single-sign-on-version-7-4-with-red-hat-directory-server-ldap%2F&amp;#38;linkname=Integrating%20Red%20Hat%20Single%20Sign-On%20version%207.4%20with%20Red%20Hat%20Directory%20Server%20%28LDAP%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F29%2Fintegrating-red-hat-single-sign-on-version-7-4-with-red-hat-directory-server-ldap%2F&amp;#38;linkname=Integrating%20Red%20Hat%20Single%20Sign-On%20version%207.4%20with%20Red%20Hat%20Directory%20Server%20%28LDAP%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F29%2Fintegrating-red-hat-single-sign-on-version-7-4-with-red-hat-directory-server-ldap%2F&amp;#38;linkname=Integrating%20Red%20Hat%20Single%20Sign-On%20version%207.4%20with%20Red%20Hat%20Directory%20Server%20%28LDAP%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F29%2Fintegrating-red-hat-single-sign-on-version-7-4-with-red-hat-directory-server-ldap%2F&amp;#38;linkname=Integrating%20Red%20Hat%20Single%20Sign-On%20version%207.4%20with%20Red%20Hat%20Directory%20Server%20%28LDAP%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F29%2Fintegrating-red-hat-single-sign-on-version-7-4-with-red-hat-directory-server-ldap%2F&amp;#38;linkname=Integrating%20Red%20Hat%20Single%20Sign-On%20version%207.4%20with%20Red%20Hat%20Directory%20Server%20%28LDAP%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F29%2Fintegrating-red-hat-single-sign-on-version-7-4-with-red-hat-directory-server-ldap%2F&amp;#38;linkname=Integrating%20Red%20Hat%20Single%20Sign-On%20version%207.4%20with%20Red%20Hat%20Directory%20Server%20%28LDAP%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F29%2Fintegrating-red-hat-single-sign-on-version-7-4-with-red-hat-directory-server-ldap%2F&amp;#038;title=Integrating%20Red%20Hat%20Single%20Sign-On%20version%207.4%20with%20Red%20Hat%20Directory%20Server%20%28LDAP%29" data-a2a-url="https://developers.redhat.com/blog/2020/12/29/integrating-red-hat-single-sign-on-version-7-4-with-red-hat-directory-server-ldap/" data-a2a-title="Integrating Red Hat Single Sign-On version 7.4 with Red Hat Directory Server (LDAP)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/12/29/integrating-red-hat-single-sign-on-version-7-4-with-red-hat-directory-server-ldap/"&gt;Integrating Red Hat Single Sign-On version 7.4 with Red Hat Directory Server (LDAP)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/aw3L0dNEPwU" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;This article describes the integration of Red Hat Single Sign-On (SSO) with Red Hat Directory Server 11 (LDAP). It also illustrates how it is possible to perform user synchronization and group synchronization between Red Hat Directory Server and Red Hat&amp;#8217;s single sign-on tools. Install Red Hat Directory Server 11 To install Red Hat Directory Server [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/12/29/integrating-red-hat-single-sign-on-version-7-4-with-red-hat-directory-server-ldap/"&gt;Integrating Red Hat Single Sign-On version 7.4 with Red Hat Directory Server (LDAP)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/12/29/integrating-red-hat-single-sign-on-version-7-4-with-red-hat-directory-server-ldap/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">796417</post-id><dc:creator>orivat</dc:creator><dc:date>2020-12-29T08:00:20Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/12/29/integrating-red-hat-single-sign-on-version-7-4-with-red-hat-directory-server-ldap/</feedburner:origLink></entry><entry><title>What’s your favorite Kubernetes feature? Hear from the experts</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/PALJIw5kL4U/" /><category term="DevNation" /><category term="DevOps" /><category term="Kubernetes" /><category term="Kubernetes DevOps" /><category term="kubernetes health checks" /><category term="kubernetes scheduler" /><category term="Kubernetes show" /><author><name>Sébastien Blanc</name></author><id>https://developers.redhat.com/blog/?p=808077</id><updated>2020-12-28T08:00:38Z</updated><published>2020-12-28T08:00:38Z</published><content type="html">&lt;p&gt;Every week I run &lt;a href="https://developers.redhat.com/devnation/the-show"&gt;DevNation: The Show&lt;/a&gt;, where guests and I discuss today&amp;#8217;s hottest technologies impacting developers and architects—and have a lot of fun. In each episode, I ask my guest: &amp;#8220;What is your favorite Kubernetes feature?&amp;#8221;&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/FL-7a9-z6Sw?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s what they have told me so far:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://twitter.com/saturnism"&gt;Ray Tsang&lt;/a&gt;, Developer Advocate at Google, likes the scaling feature but really loves the health checks you can provide for any workload that gets scheduled into your cluster.&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://twitter.com/DaschnerS"&gt;Sebastien Daschner&lt;/a&gt;, Developer Advocate at IBM, simply loves the &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; scheduler. You just tell the cluster you want to run a particular workload and the scheduler takes care of everything!&lt;/li&gt; &lt;li&gt;&lt;a href="https://twitter.com/aurelievache"&gt;Aurélie Vache&lt;/a&gt;, Cloud DevOps at Continental, like Ray, also loves the scaling features. Being able, with just one command, to scale your application to one, two, or even 10 replicas is something that is still magic for her. She also really likes the Horizontal Pod Scaler.&lt;/li&gt; &lt;li&gt;And finally, &lt;a target="_blank" rel="nofollow" href="https://twitter.com/nicolas_frankel"&gt;Nicolas Frankel&lt;/a&gt;, Developer Advocate at Hazelcast, mentioned a less known feature, the init containers, which can help run some tasks that are needed before you run your actual workload container. You can find &lt;a target="_blank" rel="nofollow" href="https://kubernetes.io/docs/concepts/workloads/pods/init-containers/"&gt;more info about init containers here&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you want to hear more from Kubernetes experts but also have fun by playing interactive games, you should join the show each week. You can catch up on &lt;a target="_blank" rel="nofollow" href="https://www.youtube.com/watch?v=Lyl61jJqY9o&amp;#38;list=PLf3vm0UK6HKpbZvVaYjOmnvnVXBkHPvms"&gt;previous episodes in this playlist&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F28%2Fwhats-your-favorite-kubernetes-feature-hear-from-the-experts%2F&amp;#38;linkname=What%E2%80%99s%20your%20favorite%20Kubernetes%20feature%3F%20Hear%20from%20the%20experts" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F28%2Fwhats-your-favorite-kubernetes-feature-hear-from-the-experts%2F&amp;#38;linkname=What%E2%80%99s%20your%20favorite%20Kubernetes%20feature%3F%20Hear%20from%20the%20experts" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F28%2Fwhats-your-favorite-kubernetes-feature-hear-from-the-experts%2F&amp;#38;linkname=What%E2%80%99s%20your%20favorite%20Kubernetes%20feature%3F%20Hear%20from%20the%20experts" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F28%2Fwhats-your-favorite-kubernetes-feature-hear-from-the-experts%2F&amp;#38;linkname=What%E2%80%99s%20your%20favorite%20Kubernetes%20feature%3F%20Hear%20from%20the%20experts" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F28%2Fwhats-your-favorite-kubernetes-feature-hear-from-the-experts%2F&amp;#38;linkname=What%E2%80%99s%20your%20favorite%20Kubernetes%20feature%3F%20Hear%20from%20the%20experts" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F28%2Fwhats-your-favorite-kubernetes-feature-hear-from-the-experts%2F&amp;#38;linkname=What%E2%80%99s%20your%20favorite%20Kubernetes%20feature%3F%20Hear%20from%20the%20experts" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F28%2Fwhats-your-favorite-kubernetes-feature-hear-from-the-experts%2F&amp;#38;linkname=What%E2%80%99s%20your%20favorite%20Kubernetes%20feature%3F%20Hear%20from%20the%20experts" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F12%2F28%2Fwhats-your-favorite-kubernetes-feature-hear-from-the-experts%2F&amp;#038;title=What%E2%80%99s%20your%20favorite%20Kubernetes%20feature%3F%20Hear%20from%20the%20experts" data-a2a-url="https://developers.redhat.com/blog/2020/12/28/whats-your-favorite-kubernetes-feature-hear-from-the-experts/" data-a2a-title="What’s your favorite Kubernetes feature? Hear from the experts"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/12/28/whats-your-favorite-kubernetes-feature-hear-from-the-experts/"&gt;What&amp;#8217;s your favorite Kubernetes feature? Hear from the experts&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/PALJIw5kL4U" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Every week I run DevNation: The Show, where guests and I discuss today&amp;#8217;s hottest technologies impacting developers and architects—and have a lot of fun. In each episode, I ask my guest: &amp;#8220;What is your favorite Kubernetes feature?&amp;#8221; Here&amp;#8217;s what they have told me so far: Ray Tsang, Developer Advocate at Google, likes the scaling feature [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/12/28/whats-your-favorite-kubernetes-feature-hear-from-the-experts/"&gt;What&amp;#8217;s your favorite Kubernetes feature? Hear from the experts&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2020/12/28/whats-your-favorite-kubernetes-feature-hear-from-the-experts/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">808077</post-id><dc:creator>Sébastien Blanc</dc:creator><dc:date>2020-12-28T08:00:38Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/12/28/whats-your-favorite-kubernetes-feature-hear-from-the-experts/</feedburner:origLink></entry><entry><title type="html">CodeReady Containers - Building a Human Resources Process with an OpenShift Operator</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/bMTwLL1xCSY/codeready-containers-building-hr-process-with-openshift-operator.html" /><author><name>Eric D. Schabell</name></author><id>http://feedproxy.google.com/~r/schabell/jboss/~3/f4BdA1tu38o/codeready-containers-building-hr-process-with-openshift-operator.html</id><updated>2020-12-28T06:00:00Z</updated><content type="html">Previously I've shared a cloud-native HR rewards process as an example project to run on the Openshift Container Platform.  What's the next evolution? There is no better way to learn about container technologies, cloud native methods, and container-based application development than getting hands-on with great open technologies. This article dives into building this process using the provided OpenShift business automation operator. This article targets getting you started on your new  by putting the latest process automation developer tooling at your disposal together with a real project for you to deploy and explore.  Even better, if you need more help getting started, we'll provide a free online workshop where you can build this project yourself. This articles outlines getting started with the  on the above installation as default, though you can point this installation to any existing OpenShift Container Platform (pass an IP address). Let's get started right now exploring the new developer tooling for process design, user tasks, forms, rules, and business logic in just a few simple steps. PROCESS AUTOMATION DEVELOPER TOOLING This is how it's going to work, first we're installing the  using the latest provided container catalog image. Next, we're using that tooling API to import the HR employee rewards project.  This means upon logging in, you'll find a project ready to go and it delivers on the promise of a fully functioning developer process automation tooling containerized on your OpenShift Container Platform. INSTALL ON CODEREADY CONTAINERS There are two options to install and run this project on the OpenShift Container Platform; use your own existing installation or to install on CodeReady Containers which provides you with a local OpenShift cluster. 1. Ensure you have installed OpenShift with 2. 3. Run 'init.sh' or 'init.bat' file. 'init.bat' must be run with Administrative privileges. Log in to the HR Rewards project to start exploring an online employee rewards application (the address will be generated by the init script): * CodeReady Container example: ( u:erics / p:redhatpam1! ) Want to build the Rewards demo from scratch? Try this hands-on . RUNNING THE REWARDS PROCESS 1. Click on the "rewards" project to open the project. 2. The project has a data model (Award and Employee), task forms, and a rewards approval process. 3. There are two EMAIL tasks configured to send email (for the linked workshop), but we want to mock them off to instead log the email to the server we deploy to. To do this go to the rewards project SETTINGS -&gt; DEPLOYMENT -&gt; WORK ITEM HANDLERS where you'll see an EMAIL task entry. Change the entries by replacing them with the folowing below and click on SAVE button: Name: Email Value: new org.jbpm.process.instance.impl.demo.SystemOutWorkItemHandler() Resolver type: MVEL 4. Build and deploy version 1 of the project. Click on the "Build and Deploy" in the upper right corner. 5. Go to "Menu -&gt; Deploy -&gt; Execution Servers" repository to see the rewards_1.0.0 Kie Container deployed on the Process Automation Server. 6. Go to "Menu -&gt; Manage -&gt; Process Definitions" to see the rewards-approval process version 1.0 has been deployed. 7. Click on the process definition line, then start a New Process Instance with button in the top right corner. 8. Fill in the Employee Reward form as follows and click on Submit button: Name: Eric D. Schabell Department: IT Award amount: 100 Explanation: Good work on demo 9. Go to "Menu -&gt; Manage -&gt; Process Instances" and select the process instance listed as running that you just started. This give the options to look at Instance Details, Process Variables, Documents, Logs, and Diagrams. Let's look at where this process is right now by selecting the Diagrams tab. 10. The red box around the "Approve Reward" task means we need to decide if the employee is to receive the award or not, so go to the "Menu -&gt; Manage -&gt; Tasks" and selecting the waiting task. 11. Click on "Claim" button at the bottom followed by clicking on the "Start" task button (standards-based user task completion steps mandate these phase labels for tasks) to edit the provided task form field. There is only one field to edit, so check the Approval box (you can leave blank to reject an award). 12. After submitting the form by clicking on the "Complete" button go to "Menu -&gt; Manage -&gt; Process Instances" and in the filters panel on the left put a check-box in the "Completed" field to view completed process instances. Find your just completed process instance, select it from the list, and open the "Diagram" tab to view the greyed out boxes that depict the path taken through this process. You should see that this employee reward has completed in the "End Accepted" final end node of the process. 13. To see the Email task results you can use the 'oc get pods' command to find the 'rewards-kieserver-#-#####' and then view the logs to see the email was sent using the mocked logging feature from above, something like this (your pod number will be different: $ oc get pods NAME READY STATUS RESTARTS AGE business-automation-operator-7ddc5869c8-m655d 1/1 Running 0 34m console-cr-form 2/2 Running 0 33m rewards-kieserver-1-deploy 0/1 Completed 0 33m rewards-kieserver-1-f77k7 1/1 Running 0 19m rewards-rhpamcentr-1-deploy 0/1 Completed 0 33m rewards-rhpamcentr-1-tmvvp 1/1 Running 0 33m $ oc logs rewards-kieserver-1-f77k7 13:52:52,653 INFO [stdout] (default task-5) Executing work item WorkItem 6 [name=Email, state=0, processInstanceId=3, parameters{From=hr@company.com, To=Eric D. Schabell@company.com, TaskName=Email, Body=We are happy to inform you that your reward submission was approved and will soon be deposited to your bank account!, Subject=Your reward was approved!}] Hope you enjoy this process project and that it helps you to get started in the cloud-native business automation world.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/bMTwLL1xCSY" height="1" width="1" alt=""/&gt;</content><dc:creator>Eric D. Schabell</dc:creator><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/f4BdA1tu38o/codeready-containers-building-hr-process-with-openshift-operator.html</feedburner:origLink></entry></feed>
