package io.blockchaingroup.vc.virtualcurrencytransfer.dao;

import org.springframework.stereotype.Service;

import io.blockchaingroup.vc.virtualcurrencytransfer.common.AccountDO;
import io.blockchaingroup.vc.virtualcurrencytransfer.common.RecipientAccount;
import io.blockchaingroup.vc.virtualcurrencytransfer.exception.AccountNotFoundException;
import io.blockchaingroup.vc.virtualcurrencytransfer.model.Account;
import io.blockchaingroup.vc.virtualcurrencytransfer.model.Transaction;
import io.blockchaingroup.vc.virtualcurrencytransfer.repository.AccountRepository;
import io.blockchaingroup.vc.virtualcurrencytransfer.repository.TransactionRepository;

import java.util.Date;
import java.util.List;

import org.mindrot.jbcrypt.BCrypt;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

@Service
public class DaoService {

	@Autowired
	AccountRepository<Account> accountRepository;

	@Autowired
	TransactionRepository<Transaction> transactionRepository;

	@Transactional
	public Account addAccount(AccountDO accountRequest) throws Exception {


		List<Account> accounts = accountRepository.getAllAccounts();

		for (Account account : accounts) {

			if(accountRequest.getUserName().equalsIgnoreCase(account.getUserName()))
				throw new Exception("Username is already used.");

			if(accountRequest.getEmail().equalsIgnoreCase(account.getEmail()))
				throw new Exception("Email is already used.");
		}

		long lastId = 0;


		if (!accounts.isEmpty()) {

			lastId = accounts.get(0).getId();

		}



		Account persistedAccount = new Account();

		persistedAccount.setUserName(accountRequest.getUserName());
		persistedAccount.setEmail(accountRequest.getEmail());
		persistedAccount.setPassowrd(hashPassword(accountRequest.getPassowrd()));
		persistedAccount.setUserId("usr-"+(lastId+1));

		persistedAccount.setCreatedDate(new Date());



		return accountRepository.save(persistedAccount);
	}

	@Transactional
	public boolean updateAccount(Account account) {
		return accountRepository.save(account) != null;
	}

	@Transactional
	public List<Account> getAllAccounts() {
		return (List<Account>) accountRepository.findAll();
	}

	@Transactional
	public List<Account> doTransaction(String userId, List<RecipientAccount> recipientAccounts)  throws Exception {

		Account senderAccount = accountRepository.findByUserId(userId);

		if (senderAccount == null)
			throw new AccountNotFoundException("There is no Account with id: "+ userId);

		List<Account> receivedAccounts;

		double totalVcAmount = 0;

		for (RecipientAccount recipientAccount : recipientAccounts) {
			String recipientUserId = recipientAccount.getUserId();
			Account recipient = accountRepository.findByUserId(recipientUserId);

			if (recipient == null)
				throw new AccountNotFoundException("There is no Account with id: "+ recipientUserId);



			totalVcAmount += recipientAccount.getTransferredAmount();

			if(totalVcAmount > senderAccount.getVc())
				throw new Exception("Insufficient fund for this transaction.");

			recipient.setVc(recipient.getVc() + recipientAccount.getTransferredAmount());
			this.updateAccount(recipient);



		}

		senderAccount.setVc(senderAccount.getVc() - totalVcAmount);
		this.updateAccount(senderAccount);

		Transaction transaction = new Transaction();

		transaction.setSender(senderAccount);
		transaction.setTotalAmount(totalVcAmount);
		transaction.setTransactionDate(new Date());
		transactionRepository.save(transaction);

		return null;
	}

	private String hashPassword(String plainTextPassword){
		return BCrypt.hashpw(plainTextPassword, BCrypt.gensalt());
	}

}
