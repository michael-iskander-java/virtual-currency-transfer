package io.blockchaingroup.vc.virtualcurrencytransfer.dao;

import org.springframework.stereotype.Service;

import io.blockchaingroup.vc.virtualcurrencytransfer.common.AccountDO;
import io.blockchaingroup.vc.virtualcurrencytransfer.model.Account;
import io.blockchaingroup.vc.virtualcurrencytransfer.repository.AccountRepository;


import java.util.Date;
import java.util.List;

import org.mindrot.jbcrypt.BCrypt;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

@Service
public class AccountDaoService {

	@Autowired
	AccountRepository<Account> accountRepository;

	@Transactional
	public Account addAccount(AccountDO accountRequest) throws Exception {


		List<Account> accounts = accountRepository.getAllAccounts();

		for (Account account : accounts) {

			if(accountRequest.getUserName().equalsIgnoreCase(account.getUserName()))
				throw new Exception("User name is alreaded used.");

		}

		long lastId = 0;


		if (!accounts.isEmpty()) {

			lastId = accounts.get(0).getId();

		}



		Account persistedAccount = new Account();

		persistedAccount.setUserName(accountRequest.getUserName());
		persistedAccount.setEmail(accountRequest.getEmail());
		persistedAccount.setPassowrd(hashPassword(accountRequest.getPassowrd()));
		persistedAccount.setUserId("usr-"+(lastId+1));

		persistedAccount.setCreatedDate(new Date());



		return accountRepository.save(persistedAccount);
	}

	@Transactional
	public boolean updateAccount(Account account) {
		return accountRepository.save(account) != null;
	}

	@Transactional
	public List<Account> getAllAccounts() {
		return (List<Account>) accountRepository.findAll();
	}

	private String hashPassword(String plainTextPassword){
		return BCrypt.hashpw(plainTextPassword, BCrypt.gensalt());
	}

}
